local v0 = {
    [0] = {
        0, 
        0, 
        0, 
        0, 
        0, 
        0, 
        0, 
        0
    }; 
    {
        1, 
        0, 
        0, 
        0, 
        0, 
        0, 
        0, 
        0
    }, 
    {
        0, 
        1, 
        0, 
        0, 
        0, 
        0, 
        0, 
        0
    }, 
    {
        1, 
        1, 
        0, 
        0, 
        0, 
        0, 
        0, 
        0
    }, 
    {
        0, 
        0, 
        1, 
        0, 
        0, 
        0, 
        0, 
        0
    }, 
    {
        1, 
        0, 
        1, 
        0, 
        0, 
        0, 
        0, 
        0
    }, 
    {
        0, 
        1, 
        1, 
        0, 
        0, 
        0, 
        0, 
        0
    }, 
    {
        1, 
        1, 
        1, 
        0, 
        0, 
        0, 
        0, 
        0
    }, 
    {
        0, 
        0, 
        0, 
        1, 
        0, 
        0, 
        0, 
        0
    }, 
    {
        1, 
        0, 
        0, 
        1, 
        0, 
        0, 
        0, 
        0
    }, 
    {
        0, 
        1, 
        0, 
        1, 
        0, 
        0, 
        0, 
        0
    }, 
    {
        1, 
        1, 
        0, 
        1, 
        0, 
        0, 
        0, 
        0
    }, 
    {
        0, 
        0, 
        1, 
        1, 
        0, 
        0, 
        0, 
        0
    }, 
    {
        1, 
        0, 
        1, 
        1, 
        0, 
        0, 
        0, 
        0
    }, 
    {
        0, 
        1, 
        1, 
        1, 
        0, 
        0, 
        0, 
        0
    }, 
    {
        1, 
        1, 
        1, 
        1, 
        0, 
        0, 
        0, 
        0
    }, 
    {
        0, 
        0, 
        0, 
        0, 
        1, 
        0, 
        0, 
        0
    }, 
    {
        1, 
        0, 
        0, 
        0, 
        1, 
        0, 
        0, 
        0
    }, 
    {
        0, 
        1, 
        0, 
        0, 
        1, 
        0, 
        0, 
        0
    }, 
    {
        1, 
        1, 
        0, 
        0, 
        1, 
        0, 
        0, 
        0
    }, 
    {
        0, 
        0, 
        1, 
        0, 
        1, 
        0, 
        0, 
        0
    }, 
    {
        1, 
        0, 
        1, 
        0, 
        1, 
        0, 
        0, 
        0
    }, 
    {
        0, 
        1, 
        1, 
        0, 
        1, 
        0, 
        0, 
        0
    }, 
    {
        1, 
        1, 
        1, 
        0, 
        1, 
        0, 
        0, 
        0
    }, 
    {
        0, 
        0, 
        0, 
        1, 
        1, 
        0, 
        0, 
        0
    }, 
    {
        1, 
        0, 
        0, 
        1, 
        1, 
        0, 
        0, 
        0
    }, 
    {
        0, 
        1, 
        0, 
        1, 
        1, 
        0, 
        0, 
        0
    }, 
    {
        1, 
        1, 
        0, 
        1, 
        1, 
        0, 
        0, 
        0
    }, 
    {
        0, 
        0, 
        1, 
        1, 
        1, 
        0, 
        0, 
        0
    }, 
    {
        1, 
        0, 
        1, 
        1, 
        1, 
        0, 
        0, 
        0
    }, 
    {
        0, 
        1, 
        1, 
        1, 
        1, 
        0, 
        0, 
        0
    }, 
    {
        1, 
        1, 
        1, 
        1, 
        1, 
        0, 
        0, 
        0
    }, 
    {
        0, 
        0, 
        0, 
        0, 
        0, 
        1, 
        0, 
        0
    }, 
    {
        1, 
        0, 
        0, 
        0, 
        0, 
        1, 
        0, 
        0
    }, 
    {
        0, 
        1, 
        0, 
        0, 
        0, 
        1, 
        0, 
        0
    }, 
    {
        1, 
        1, 
        0, 
        0, 
        0, 
        1, 
        0, 
        0
    }, 
    {
        0, 
        0, 
        1, 
        0, 
        0, 
        1, 
        0, 
        0
    }, 
    {
        1, 
        0, 
        1, 
        0, 
        0, 
        1, 
        0, 
        0
    }, 
    {
        0, 
        1, 
        1, 
        0, 
        0, 
        1, 
        0, 
        0
    }, 
    {
        1, 
        1, 
        1, 
        0, 
        0, 
        1, 
        0, 
        0
    }, 
    {
        0, 
        0, 
        0, 
        1, 
        0, 
        1, 
        0, 
        0
    }, 
    {
        1, 
        0, 
        0, 
        1, 
        0, 
        1, 
        0, 
        0
    }, 
    {
        0, 
        1, 
        0, 
        1, 
        0, 
        1, 
        0, 
        0
    }, 
    {
        1, 
        1, 
        0, 
        1, 
        0, 
        1, 
        0, 
        0
    }, 
    {
        0, 
        0, 
        1, 
        1, 
        0, 
        1, 
        0, 
        0
    }, 
    {
        1, 
        0, 
        1, 
        1, 
        0, 
        1, 
        0, 
        0
    }, 
    {
        0, 
        1, 
        1, 
        1, 
        0, 
        1, 
        0, 
        0
    }, 
    {
        1, 
        1, 
        1, 
        1, 
        0, 
        1, 
        0, 
        0
    }, 
    {
        0, 
        0, 
        0, 
        0, 
        1, 
        1, 
        0, 
        0
    }, 
    {
        1, 
        0, 
        0, 
        0, 
        1, 
        1, 
        0, 
        0
    }, 
    {
        0, 
        1, 
        0, 
        0, 
        1, 
        1, 
        0, 
        0
    }, 
    {
        1, 
        1, 
        0, 
        0, 
        1, 
        1, 
        0, 
        0
    }, 
    {
        0, 
        0, 
        1, 
        0, 
        1, 
        1, 
        0, 
        0
    }, 
    {
        1, 
        0, 
        1, 
        0, 
        1, 
        1, 
        0, 
        0
    }, 
    {
        0, 
        1, 
        1, 
        0, 
        1, 
        1, 
        0, 
        0
    }, 
    {
        1, 
        1, 
        1, 
        0, 
        1, 
        1, 
        0, 
        0
    }, 
    {
        0, 
        0, 
        0, 
        1, 
        1, 
        1, 
        0, 
        0
    }, 
    {
        1, 
        0, 
        0, 
        1, 
        1, 
        1, 
        0, 
        0
    }, 
    {
        0, 
        1, 
        0, 
        1, 
        1, 
        1, 
        0, 
        0
    }, 
    {
        1, 
        1, 
        0, 
        1, 
        1, 
        1, 
        0, 
        0
    }, 
    {
        0, 
        0, 
        1, 
        1, 
        1, 
        1, 
        0, 
        0
    }, 
    {
        1, 
        0, 
        1, 
        1, 
        1, 
        1, 
        0, 
        0
    }, 
    {
        0, 
        1, 
        1, 
        1, 
        1, 
        1, 
        0, 
        0
    }, 
    {
        1, 
        1, 
        1, 
        1, 
        1, 
        1, 
        0, 
        0
    }, 
    {
        0, 
        0, 
        0, 
        0, 
        0, 
        0, 
        1, 
        0
    }, 
    {
        1, 
        0, 
        0, 
        0, 
        0, 
        0, 
        1, 
        0
    }, 
    {
        0, 
        1, 
        0, 
        0, 
        0, 
        0, 
        1, 
        0
    }, 
    {
        1, 
        1, 
        0, 
        0, 
        0, 
        0, 
        1, 
        0
    }, 
    {
        0, 
        0, 
        1, 
        0, 
        0, 
        0, 
        1, 
        0
    }, 
    {
        1, 
        0, 
        1, 
        0, 
        0, 
        0, 
        1, 
        0
    }, 
    {
        0, 
        1, 
        1, 
        0, 
        0, 
        0, 
        1, 
        0
    }, 
    {
        1, 
        1, 
        1, 
        0, 
        0, 
        0, 
        1, 
        0
    }, 
    {
        0, 
        0, 
        0, 
        1, 
        0, 
        0, 
        1, 
        0
    }, 
    {
        1, 
        0, 
        0, 
        1, 
        0, 
        0, 
        1, 
        0
    }, 
    {
        0, 
        1, 
        0, 
        1, 
        0, 
        0, 
        1, 
        0
    }, 
    {
        1, 
        1, 
        0, 
        1, 
        0, 
        0, 
        1, 
        0
    }, 
    {
        0, 
        0, 
        1, 
        1, 
        0, 
        0, 
        1, 
        0
    }, 
    {
        1, 
        0, 
        1, 
        1, 
        0, 
        0, 
        1, 
        0
    }, 
    {
        0, 
        1, 
        1, 
        1, 
        0, 
        0, 
        1, 
        0
    }, 
    {
        1, 
        1, 
        1, 
        1, 
        0, 
        0, 
        1, 
        0
    }, 
    {
        0, 
        0, 
        0, 
        0, 
        1, 
        0, 
        1, 
        0
    }, 
    {
        1, 
        0, 
        0, 
        0, 
        1, 
        0, 
        1, 
        0
    }, 
    {
        0, 
        1, 
        0, 
        0, 
        1, 
        0, 
        1, 
        0
    }, 
    {
        1, 
        1, 
        0, 
        0, 
        1, 
        0, 
        1, 
        0
    }, 
    {
        0, 
        0, 
        1, 
        0, 
        1, 
        0, 
        1, 
        0
    }, 
    {
        1, 
        0, 
        1, 
        0, 
        1, 
        0, 
        1, 
        0
    }, 
    {
        0, 
        1, 
        1, 
        0, 
        1, 
        0, 
        1, 
        0
    }, 
    {
        1, 
        1, 
        1, 
        0, 
        1, 
        0, 
        1, 
        0
    }, 
    {
        0, 
        0, 
        0, 
        1, 
        1, 
        0, 
        1, 
        0
    }, 
    {
        1, 
        0, 
        0, 
        1, 
        1, 
        0, 
        1, 
        0
    }, 
    {
        0, 
        1, 
        0, 
        1, 
        1, 
        0, 
        1, 
        0
    }, 
    {
        1, 
        1, 
        0, 
        1, 
        1, 
        0, 
        1, 
        0
    }, 
    {
        0, 
        0, 
        1, 
        1, 
        1, 
        0, 
        1, 
        0
    }, 
    {
        1, 
        0, 
        1, 
        1, 
        1, 
        0, 
        1, 
        0
    }, 
    {
        0, 
        1, 
        1, 
        1, 
        1, 
        0, 
        1, 
        0
    }, 
    {
        1, 
        1, 
        1, 
        1, 
        1, 
        0, 
        1, 
        0
    }, 
    {
        0, 
        0, 
        0, 
        0, 
        0, 
        1, 
        1, 
        0
    }, 
    {
        1, 
        0, 
        0, 
        0, 
        0, 
        1, 
        1, 
        0
    }, 
    {
        0, 
        1, 
        0, 
        0, 
        0, 
        1, 
        1, 
        0
    }, 
    {
        1, 
        1, 
        0, 
        0, 
        0, 
        1, 
        1, 
        0
    }, 
    {
        0, 
        0, 
        1, 
        0, 
        0, 
        1, 
        1, 
        0
    }, 
    {
        1, 
        0, 
        1, 
        0, 
        0, 
        1, 
        1, 
        0
    }, 
    {
        0, 
        1, 
        1, 
        0, 
        0, 
        1, 
        1, 
        0
    }, 
    {
        1, 
        1, 
        1, 
        0, 
        0, 
        1, 
        1, 
        0
    }, 
    {
        0, 
        0, 
        0, 
        1, 
        0, 
        1, 
        1, 
        0
    }, 
    {
        1, 
        0, 
        0, 
        1, 
        0, 
        1, 
        1, 
        0
    }, 
    {
        0, 
        1, 
        0, 
        1, 
        0, 
        1, 
        1, 
        0
    }, 
    {
        1, 
        1, 
        0, 
        1, 
        0, 
        1, 
        1, 
        0
    }, 
    {
        0, 
        0, 
        1, 
        1, 
        0, 
        1, 
        1, 
        0
    }, 
    {
        1, 
        0, 
        1, 
        1, 
        0, 
        1, 
        1, 
        0
    }, 
    {
        0, 
        1, 
        1, 
        1, 
        0, 
        1, 
        1, 
        0
    }, 
    {
        1, 
        1, 
        1, 
        1, 
        0, 
        1, 
        1, 
        0
    }, 
    {
        0, 
        0, 
        0, 
        0, 
        1, 
        1, 
        1, 
        0
    }, 
    {
        1, 
        0, 
        0, 
        0, 
        1, 
        1, 
        1, 
        0
    }, 
    {
        0, 
        1, 
        0, 
        0, 
        1, 
        1, 
        1, 
        0
    }, 
    {
        1, 
        1, 
        0, 
        0, 
        1, 
        1, 
        1, 
        0
    }, 
    {
        0, 
        0, 
        1, 
        0, 
        1, 
        1, 
        1, 
        0
    }, 
    {
        1, 
        0, 
        1, 
        0, 
        1, 
        1, 
        1, 
        0
    }, 
    {
        0, 
        1, 
        1, 
        0, 
        1, 
        1, 
        1, 
        0
    }, 
    {
        1, 
        1, 
        1, 
        0, 
        1, 
        1, 
        1, 
        0
    }, 
    {
        0, 
        0, 
        0, 
        1, 
        1, 
        1, 
        1, 
        0
    }, 
    {
        1, 
        0, 
        0, 
        1, 
        1, 
        1, 
        1, 
        0
    }, 
    {
        0, 
        1, 
        0, 
        1, 
        1, 
        1, 
        1, 
        0
    }, 
    {
        1, 
        1, 
        0, 
        1, 
        1, 
        1, 
        1, 
        0
    }, 
    {
        0, 
        0, 
        1, 
        1, 
        1, 
        1, 
        1, 
        0
    }, 
    {
        1, 
        0, 
        1, 
        1, 
        1, 
        1, 
        1, 
        0
    }, 
    {
        0, 
        1, 
        1, 
        1, 
        1, 
        1, 
        1, 
        0
    }, 
    {
        1, 
        1, 
        1, 
        1, 
        1, 
        1, 
        1, 
        0
    }, 
    {
        0, 
        0, 
        0, 
        0, 
        0, 
        0, 
        0, 
        1
    }, 
    {
        1, 
        0, 
        0, 
        0, 
        0, 
        0, 
        0, 
        1
    }, 
    {
        0, 
        1, 
        0, 
        0, 
        0, 
        0, 
        0, 
        1
    }, 
    {
        1, 
        1, 
        0, 
        0, 
        0, 
        0, 
        0, 
        1
    }, 
    {
        0, 
        0, 
        1, 
        0, 
        0, 
        0, 
        0, 
        1
    }, 
    {
        1, 
        0, 
        1, 
        0, 
        0, 
        0, 
        0, 
        1
    }, 
    {
        0, 
        1, 
        1, 
        0, 
        0, 
        0, 
        0, 
        1
    }, 
    {
        1, 
        1, 
        1, 
        0, 
        0, 
        0, 
        0, 
        1
    }, 
    {
        0, 
        0, 
        0, 
        1, 
        0, 
        0, 
        0, 
        1
    }, 
    {
        1, 
        0, 
        0, 
        1, 
        0, 
        0, 
        0, 
        1
    }, 
    {
        0, 
        1, 
        0, 
        1, 
        0, 
        0, 
        0, 
        1
    }, 
    {
        1, 
        1, 
        0, 
        1, 
        0, 
        0, 
        0, 
        1
    }, 
    {
        0, 
        0, 
        1, 
        1, 
        0, 
        0, 
        0, 
        1
    }, 
    {
        1, 
        0, 
        1, 
        1, 
        0, 
        0, 
        0, 
        1
    }, 
    {
        0, 
        1, 
        1, 
        1, 
        0, 
        0, 
        0, 
        1
    }, 
    {
        1, 
        1, 
        1, 
        1, 
        0, 
        0, 
        0, 
        1
    }, 
    {
        0, 
        0, 
        0, 
        0, 
        1, 
        0, 
        0, 
        1
    }, 
    {
        1, 
        0, 
        0, 
        0, 
        1, 
        0, 
        0, 
        1
    }, 
    {
        0, 
        1, 
        0, 
        0, 
        1, 
        0, 
        0, 
        1
    }, 
    {
        1, 
        1, 
        0, 
        0, 
        1, 
        0, 
        0, 
        1
    }, 
    {
        0, 
        0, 
        1, 
        0, 
        1, 
        0, 
        0, 
        1
    }, 
    {
        1, 
        0, 
        1, 
        0, 
        1, 
        0, 
        0, 
        1
    }, 
    {
        0, 
        1, 
        1, 
        0, 
        1, 
        0, 
        0, 
        1
    }, 
    {
        1, 
        1, 
        1, 
        0, 
        1, 
        0, 
        0, 
        1
    }, 
    {
        0, 
        0, 
        0, 
        1, 
        1, 
        0, 
        0, 
        1
    }, 
    {
        1, 
        0, 
        0, 
        1, 
        1, 
        0, 
        0, 
        1
    }, 
    {
        0, 
        1, 
        0, 
        1, 
        1, 
        0, 
        0, 
        1
    }, 
    {
        1, 
        1, 
        0, 
        1, 
        1, 
        0, 
        0, 
        1
    }, 
    {
        0, 
        0, 
        1, 
        1, 
        1, 
        0, 
        0, 
        1
    }, 
    {
        1, 
        0, 
        1, 
        1, 
        1, 
        0, 
        0, 
        1
    }, 
    {
        0, 
        1, 
        1, 
        1, 
        1, 
        0, 
        0, 
        1
    }, 
    {
        1, 
        1, 
        1, 
        1, 
        1, 
        0, 
        0, 
        1
    }, 
    {
        0, 
        0, 
        0, 
        0, 
        0, 
        1, 
        0, 
        1
    }, 
    {
        1, 
        0, 
        0, 
        0, 
        0, 
        1, 
        0, 
        1
    }, 
    {
        0, 
        1, 
        0, 
        0, 
        0, 
        1, 
        0, 
        1
    }, 
    {
        1, 
        1, 
        0, 
        0, 
        0, 
        1, 
        0, 
        1
    }, 
    {
        0, 
        0, 
        1, 
        0, 
        0, 
        1, 
        0, 
        1
    }, 
    {
        1, 
        0, 
        1, 
        0, 
        0, 
        1, 
        0, 
        1
    }, 
    {
        0, 
        1, 
        1, 
        0, 
        0, 
        1, 
        0, 
        1
    }, 
    {
        1, 
        1, 
        1, 
        0, 
        0, 
        1, 
        0, 
        1
    }, 
    {
        0, 
        0, 
        0, 
        1, 
        0, 
        1, 
        0, 
        1
    }, 
    {
        1, 
        0, 
        0, 
        1, 
        0, 
        1, 
        0, 
        1
    }, 
    {
        0, 
        1, 
        0, 
        1, 
        0, 
        1, 
        0, 
        1
    }, 
    {
        1, 
        1, 
        0, 
        1, 
        0, 
        1, 
        0, 
        1
    }, 
    {
        0, 
        0, 
        1, 
        1, 
        0, 
        1, 
        0, 
        1
    }, 
    {
        1, 
        0, 
        1, 
        1, 
        0, 
        1, 
        0, 
        1
    }, 
    {
        0, 
        1, 
        1, 
        1, 
        0, 
        1, 
        0, 
        1
    }, 
    {
        1, 
        1, 
        1, 
        1, 
        0, 
        1, 
        0, 
        1
    }, 
    {
        0, 
        0, 
        0, 
        0, 
        1, 
        1, 
        0, 
        1
    }, 
    {
        1, 
        0, 
        0, 
        0, 
        1, 
        1, 
        0, 
        1
    }, 
    {
        0, 
        1, 
        0, 
        0, 
        1, 
        1, 
        0, 
        1
    }, 
    {
        1, 
        1, 
        0, 
        0, 
        1, 
        1, 
        0, 
        1
    }, 
    {
        0, 
        0, 
        1, 
        0, 
        1, 
        1, 
        0, 
        1
    }, 
    {
        1, 
        0, 
        1, 
        0, 
        1, 
        1, 
        0, 
        1
    }, 
    {
        0, 
        1, 
        1, 
        0, 
        1, 
        1, 
        0, 
        1
    }, 
    {
        1, 
        1, 
        1, 
        0, 
        1, 
        1, 
        0, 
        1
    }, 
    {
        0, 
        0, 
        0, 
        1, 
        1, 
        1, 
        0, 
        1
    }, 
    {
        1, 
        0, 
        0, 
        1, 
        1, 
        1, 
        0, 
        1
    }, 
    {
        0, 
        1, 
        0, 
        1, 
        1, 
        1, 
        0, 
        1
    }, 
    {
        1, 
        1, 
        0, 
        1, 
        1, 
        1, 
        0, 
        1
    }, 
    {
        0, 
        0, 
        1, 
        1, 
        1, 
        1, 
        0, 
        1
    }, 
    {
        1, 
        0, 
        1, 
        1, 
        1, 
        1, 
        0, 
        1
    }, 
    {
        0, 
        1, 
        1, 
        1, 
        1, 
        1, 
        0, 
        1
    }, 
    {
        1, 
        1, 
        1, 
        1, 
        1, 
        1, 
        0, 
        1
    }, 
    {
        0, 
        0, 
        0, 
        0, 
        0, 
        0, 
        1, 
        1
    }, 
    {
        1, 
        0, 
        0, 
        0, 
        0, 
        0, 
        1, 
        1
    }, 
    {
        0, 
        1, 
        0, 
        0, 
        0, 
        0, 
        1, 
        1
    }, 
    {
        1, 
        1, 
        0, 
        0, 
        0, 
        0, 
        1, 
        1
    }, 
    {
        0, 
        0, 
        1, 
        0, 
        0, 
        0, 
        1, 
        1
    }, 
    {
        1, 
        0, 
        1, 
        0, 
        0, 
        0, 
        1, 
        1
    }, 
    {
        0, 
        1, 
        1, 
        0, 
        0, 
        0, 
        1, 
        1
    }, 
    {
        1, 
        1, 
        1, 
        0, 
        0, 
        0, 
        1, 
        1
    }, 
    {
        0, 
        0, 
        0, 
        1, 
        0, 
        0, 
        1, 
        1
    }, 
    {
        1, 
        0, 
        0, 
        1, 
        0, 
        0, 
        1, 
        1
    }, 
    {
        0, 
        1, 
        0, 
        1, 
        0, 
        0, 
        1, 
        1
    }, 
    {
        1, 
        1, 
        0, 
        1, 
        0, 
        0, 
        1, 
        1
    }, 
    {
        0, 
        0, 
        1, 
        1, 
        0, 
        0, 
        1, 
        1
    }, 
    {
        1, 
        0, 
        1, 
        1, 
        0, 
        0, 
        1, 
        1
    }, 
    {
        0, 
        1, 
        1, 
        1, 
        0, 
        0, 
        1, 
        1
    }, 
    {
        1, 
        1, 
        1, 
        1, 
        0, 
        0, 
        1, 
        1
    }, 
    {
        0, 
        0, 
        0, 
        0, 
        1, 
        0, 
        1, 
        1
    }, 
    {
        1, 
        0, 
        0, 
        0, 
        1, 
        0, 
        1, 
        1
    }, 
    {
        0, 
        1, 
        0, 
        0, 
        1, 
        0, 
        1, 
        1
    }, 
    {
        1, 
        1, 
        0, 
        0, 
        1, 
        0, 
        1, 
        1
    }, 
    {
        0, 
        0, 
        1, 
        0, 
        1, 
        0, 
        1, 
        1
    }, 
    {
        1, 
        0, 
        1, 
        0, 
        1, 
        0, 
        1, 
        1
    }, 
    {
        0, 
        1, 
        1, 
        0, 
        1, 
        0, 
        1, 
        1
    }, 
    {
        1, 
        1, 
        1, 
        0, 
        1, 
        0, 
        1, 
        1
    }, 
    {
        0, 
        0, 
        0, 
        1, 
        1, 
        0, 
        1, 
        1
    }, 
    {
        1, 
        0, 
        0, 
        1, 
        1, 
        0, 
        1, 
        1
    }, 
    {
        0, 
        1, 
        0, 
        1, 
        1, 
        0, 
        1, 
        1
    }, 
    {
        1, 
        1, 
        0, 
        1, 
        1, 
        0, 
        1, 
        1
    }, 
    {
        0, 
        0, 
        1, 
        1, 
        1, 
        0, 
        1, 
        1
    }, 
    {
        1, 
        0, 
        1, 
        1, 
        1, 
        0, 
        1, 
        1
    }, 
    {
        0, 
        1, 
        1, 
        1, 
        1, 
        0, 
        1, 
        1
    }, 
    {
        1, 
        1, 
        1, 
        1, 
        1, 
        0, 
        1, 
        1
    }, 
    {
        0, 
        0, 
        0, 
        0, 
        0, 
        1, 
        1, 
        1
    }, 
    {
        1, 
        0, 
        0, 
        0, 
        0, 
        1, 
        1, 
        1
    }, 
    {
        0, 
        1, 
        0, 
        0, 
        0, 
        1, 
        1, 
        1
    }, 
    {
        1, 
        1, 
        0, 
        0, 
        0, 
        1, 
        1, 
        1
    }, 
    {
        0, 
        0, 
        1, 
        0, 
        0, 
        1, 
        1, 
        1
    }, 
    {
        1, 
        0, 
        1, 
        0, 
        0, 
        1, 
        1, 
        1
    }, 
    {
        0, 
        1, 
        1, 
        0, 
        0, 
        1, 
        1, 
        1
    }, 
    {
        1, 
        1, 
        1, 
        0, 
        0, 
        1, 
        1, 
        1
    }, 
    {
        0, 
        0, 
        0, 
        1, 
        0, 
        1, 
        1, 
        1
    }, 
    {
        1, 
        0, 
        0, 
        1, 
        0, 
        1, 
        1, 
        1
    }, 
    {
        0, 
        1, 
        0, 
        1, 
        0, 
        1, 
        1, 
        1
    }, 
    {
        1, 
        1, 
        0, 
        1, 
        0, 
        1, 
        1, 
        1
    }, 
    {
        0, 
        0, 
        1, 
        1, 
        0, 
        1, 
        1, 
        1
    }, 
    {
        1, 
        0, 
        1, 
        1, 
        0, 
        1, 
        1, 
        1
    }, 
    {
        0, 
        1, 
        1, 
        1, 
        0, 
        1, 
        1, 
        1
    }, 
    {
        1, 
        1, 
        1, 
        1, 
        0, 
        1, 
        1, 
        1
    }, 
    {
        0, 
        0, 
        0, 
        0, 
        1, 
        1, 
        1, 
        1
    }, 
    {
        1, 
        0, 
        0, 
        0, 
        1, 
        1, 
        1, 
        1
    }, 
    {
        0, 
        1, 
        0, 
        0, 
        1, 
        1, 
        1, 
        1
    }, 
    {
        1, 
        1, 
        0, 
        0, 
        1, 
        1, 
        1, 
        1
    }, 
    {
        0, 
        0, 
        1, 
        0, 
        1, 
        1, 
        1, 
        1
    }, 
    {
        1, 
        0, 
        1, 
        0, 
        1, 
        1, 
        1, 
        1
    }, 
    {
        0, 
        1, 
        1, 
        0, 
        1, 
        1, 
        1, 
        1
    }, 
    {
        1, 
        1, 
        1, 
        0, 
        1, 
        1, 
        1, 
        1
    }, 
    {
        0, 
        0, 
        0, 
        1, 
        1, 
        1, 
        1, 
        1
    }, 
    {
        1, 
        0, 
        0, 
        1, 
        1, 
        1, 
        1, 
        1
    }, 
    {
        0, 
        1, 
        0, 
        1, 
        1, 
        1, 
        1, 
        1
    }, 
    {
        1, 
        1, 
        0, 
        1, 
        1, 
        1, 
        1, 
        1
    }, 
    {
        0, 
        0, 
        1, 
        1, 
        1, 
        1, 
        1, 
        1
    }, 
    {
        1, 
        0, 
        1, 
        1, 
        1, 
        1, 
        1, 
        1
    }, 
    {
        0, 
        1, 
        1, 
        1, 
        1, 
        1, 
        1, 
        1
    }, 
    {
        1, 
        1, 
        1, 
        1, 
        1, 
        1, 
        1, 
        1
    }
};
local function _(v1) --[[ Line: 116 ]] --[[ Name: tbl_to_number ]]
    local v2 = #v1;
    local v3 = 0;
    local v4 = 1;
    for v5 = 1, v2 do
        v3 = v3 + v1[v5] * v4;
        v4 = v4 * 2;
    end;
    return v3;
end;
local function v17(v7, v8) --[[ Line: 128 ]] --[[ Name: bit_xor ]]
    -- upvalues: v0 (copy)
    local v9 = v0[v7];
    local v10 = v0[v8];
    local v11 = {};
    for v12 = 1, 8 do
        if v9[v12] ~= v10[v12] then
            v11[v12] = 1;
        else
            v11[v12] = 0;
        end;
    end;
    local v13 = #v11;
    local v14 = 0;
    local v15 = 1;
    for v16 = 1, v13 do
        v14 = v14 + v11[v16] * v15;
        v15 = v15 * 2;
    end;
    return v14;
end;
local function v25(v18, v19) --[[ Line: 143 ]] --[[ Name: binary ]]
    local v20 = string.format("%o", v18);
    local v21 = {
        ["0"] = "000", 
        ["1"] = "001", 
        ["2"] = "010", 
        ["3"] = "011", 
        ["4"] = "100", 
        ["5"] = "101", 
        ["6"] = "110", 
        ["7"] = "111"
    };
    v20 = string.gsub(v20, "(.)", function(v22) --[[ Line: 147 ]]
        -- upvalues: v21 (copy)
        return v21[v22];
    end);
    v20 = string.gsub(v20, "^0*(.*)$", "%1");
    local v23 = string.format("%%%ds", v19);
    local v24 = string.format(v23, v20);
    return string.gsub(v24, " ", "0");
end;
local function _(v26, v27, v28, v29) --[[ Line: 158 ]] --[[ Name: fill_matrix_position ]]
    if v27 == "1" then
        v26[v28][v29] = 2;
        return;
    else
        v26[v28][v29] = -2;
        return;
    end;
end;
local function v32(v31) --[[ Line: 177 ]] --[[ Name: get_mode ]]
    if string.match(v31, "^[0-9]+$") then
        return 1;
    elseif string.match(v31, "^[0-9A-Z $%%*./:+-]+$") then
        return 2;
    else
        return 4;
    end;
end;
local v33 = {
    {
        19, 
        16, 
        13, 
        9
    }, 
    {
        34, 
        28, 
        22, 
        16
    }, 
    {
        55, 
        44, 
        34, 
        26
    }, 
    {
        80, 
        64, 
        48, 
        36
    }, 
    {
        108, 
        86, 
        62, 
        46
    }, 
    {
        136, 
        108, 
        76, 
        60
    }, 
    {
        156, 
        124, 
        88, 
        66
    }, 
    {
        194, 
        154, 
        110, 
        86
    }, 
    {
        232, 
        182, 
        132, 
        100
    }, 
    {
        274, 
        216, 
        154, 
        122
    }, 
    {
        324, 
        254, 
        180, 
        140
    }, 
    {
        370, 
        290, 
        206, 
        158
    }, 
    {
        428, 
        334, 
        244, 
        180
    }, 
    {
        461, 
        365, 
        261, 
        197
    }, 
    {
        523, 
        415, 
        295, 
        223
    }, 
    {
        589, 
        453, 
        325, 
        253
    }, 
    {
        647, 
        507, 
        367, 
        283
    }, 
    {
        721, 
        563, 
        397, 
        313
    }, 
    {
        795, 
        627, 
        445, 
        341
    }, 
    {
        861, 
        669, 
        485, 
        385
    }, 
    {
        932, 
        714, 
        512, 
        406
    }, 
    {
        1006, 
        782, 
        568, 
        442
    }, 
    {
        1094, 
        860, 
        614, 
        464
    }, 
    {
        1174, 
        914, 
        664, 
        514
    }, 
    {
        1276, 
        1000, 
        718, 
        538
    }, 
    {
        1370, 
        1062, 
        754, 
        596
    }, 
    {
        1468, 
        1128, 
        808, 
        628
    }, 
    {
        1531, 
        1193, 
        871, 
        661
    }, 
    {
        1631, 
        1267, 
        911, 
        701
    }, 
    {
        1735, 
        1373, 
        985, 
        745
    }, 
    {
        1843, 
        1455, 
        1033, 
        793
    }, 
    {
        1955, 
        1541, 
        1115, 
        845
    }, 
    {
        2071, 
        1631, 
        1171, 
        901
    }, 
    {
        2191, 
        1725, 
        1231, 
        961
    }, 
    {
        2306, 
        1812, 
        1286, 
        986
    }, 
    {
        2434, 
        1914, 
        1354, 
        1054
    }, 
    {
        2566, 
        1992, 
        1426, 
        1096
    }, 
    {
        2702, 
        2102, 
        1502, 
        1142
    }, 
    {
        2812, 
        2216, 
        1582, 
        1222
    }, 
    {
        2956, 
        2334, 
        1666, 
        1276
    }
};
local function v50(v34, v35, v36) --[[ Line: 224 ]] --[[ Name: get_version_eclevel ]]
    -- upvalues: v33 (copy)
    local l_v35_0 = v35;
    if v35 == 4 then
        l_v35_0 = 3;
    elseif v35 == 8 then
        l_v35_0 = 4;
    end;
    assert(l_v35_0 <= 4);
    local _ = nil;
    local v39 = nil;
    local v40 = nil;
    local v41 = nil;
    local _ = nil;
    local v43 = {
        {
            10, 
            9, 
            8, 
            8
        }, 
        {
            12, 
            11, 
            16, 
            10
        }, 
        {
            14, 
            13, 
            16, 
            12
        }
    };
    local v44 = 40;
    local v45 = v36 or 1;
    local v46 = 1;
    local v47 = 4;
    if v36 and v36 >= 1 and v36 <= 4 then
        v46 = v36;
        v47 = v36;
    end;
    for v48 = v46, v47 do
        for v49 = 1, #v33 do
            v39 = v33[v49][v48] * 8 - 4;
            if v49 < 10 then
                v40 = v43[1][l_v35_0];
            elseif v49 < 27 then
                v40 = v43[2][l_v35_0];
            elseif v49 <= 40 then
                v40 = v43[3][l_v35_0];
            end;
            v41 = v39 - v40;
            if v34 <= if l_v35_0 == 1 then math.floor(v41 * 3 / 10) else if l_v35_0 == 2 then math.floor(v41 * 2 / 11) else if l_v35_0 == 3 then math.floor(v41 * 1 / 8) else math.floor(v41 * 1 / 13) then
                if v49 <= v44 then
                    v44 = v49;
                    v45 = v48;
                    break;
                else
                    break;
                end;
            end;
        end;
    end;
    return v44, v45;
end;
local function v57(v51, v52, v53) --[[ Line: 277 ]] --[[ Name: get_length ]]
    -- upvalues: v25 (copy)
    local l_v53_0 = v53;
    if v53 == 4 then
        l_v53_0 = 3;
    elseif v53 == 8 then
        l_v53_0 = 4;
    end;
    assert(l_v53_0 <= 4);
    local v55 = {
        {
            10, 
            9, 
            8, 
            8
        }, 
        {
            12, 
            11, 
            16, 
            10
        }, 
        {
            14, 
            13, 
            16, 
            12
        }
    };
    local v56 = nil;
    if v52 < 10 then
        v56 = v55[1][l_v53_0];
    elseif v52 < 27 then
        v56 = v55[2][l_v53_0];
    elseif v52 <= 40 then
        v56 = v55[3][l_v53_0];
    else
        assert(false, "get_length, version > 40 not supported");
    end;
    return (v25(#v51, v56));
end;
local function v66(v58, v59, v60) --[[ Line: 303 ]] --[[ Name: get_version_eclevel_mode_bistringlength ]]
    -- upvalues: v50 (copy), v57 (copy), v25 (copy)
    local v61 = nil;
    if v60 then
        assert(false, "not implemented");
        v61 = v60;
    else
        v61 = string.match(v58, "^[0-9]+$") and 1 or string.match(v58, "^[0-9A-Z $%%*./:+-]+$") and 2 or 4;
    end;
    local v62 = nil;
    local v63 = nil;
    local v64, v65 = v50(#v58, v61, v59);
    v62 = v64;
    v63 = v65;
    v64 = v57(v58, v62, v61);
    return v62, v63, v25(v61, 4), v61, v64;
end;
local v67 = {
    -1, 
    -1, 
    -1, 
    -1, 
    -1, 
    -1, 
    -1, 
    -1, 
    -1, 
    -1, 
    -1, 
    -1, 
    -1, 
    -1, 
    -1, 
    -1, 
    -1, 
    -1, 
    -1, 
    -1, 
    -1, 
    -1, 
    -1, 
    -1, 
    -1, 
    -1, 
    -1, 
    -1, 
    -1, 
    -1, 
    -1, 
    36, 
    -1, 
    -1, 
    -1, 
    37, 
    38, 
    -1, 
    -1, 
    -1, 
    -1, 
    39, 
    40, 
    -1, 
    41, 
    42, 
    43, 
    0, 
    1, 
    2, 
    3, 
    4, 
    5, 
    6, 
    7, 
    8, 
    9, 
    44, 
    -1, 
    -1, 
    -1, 
    -1, 
    -1, 
    -1, 
    10, 
    11, 
    12, 
    13, 
    14, 
    15, 
    16, 
    17, 
    18, 
    19, 
    20, 
    21, 
    22, 
    23, 
    24, 
    25, 
    26, 
    27, 
    28, 
    29, 
    30, 
    31, 
    32, 
    33, 
    34, 
    35, 
    -1, 
    -1, 
    -1, 
    -1, 
    -1
};
local function v72(v68) --[[ Line: 339 ]] --[[ Name: encode_string_numeric ]]
    -- upvalues: v25 (copy)
    local v69 = "";
    local v70 = nil;
    string.gsub(v68, "..?.?", function(v71) --[[ Line: 342 ]]
        -- upvalues: v70 (ref), v69 (ref), v25 (ref)
        v70 = tonumber(v71);
        if #v71 == 3 then
            v69 = v69 .. v25(v70, 10);
            return;
        elseif #v71 == 2 then
            v69 = v69 .. v25(v70, 7);
            return;
        else
            v69 = v69 .. v25(v70, 4);
            return;
        end;
    end);
    return v69;
end;
local function v79(v73) --[[ Line: 357 ]] --[[ Name: encode_string_ascii ]]
    -- upvalues: v67 (copy), v25 (copy)
    local v74 = "";
    local v75 = nil;
    local v76 = nil;
    local v77 = nil;
    string.gsub(v73, "..?", function(v78) --[[ Line: 361 ]]
        -- upvalues: v76 (ref), v67 (ref), v77 (ref), v75 (ref), v74 (ref), v25 (ref)
        if #v78 == 2 then
            v76 = v67[string.byte((string.sub(v78, 1, 1)))];
            v77 = v67[string.byte((string.sub(v78, 2, 2)))];
            v75 = v76 * 45 + v77;
            v74 = v74 .. v25(v75, 11);
            return;
        else
            v75 = v67[string.byte(v78)];
            v74 = v74 .. v25(v75, 6);
            return;
        end;
    end);
    return v74;
end;
local function v83(v80) --[[ Line: 378 ]] --[[ Name: encode_string_binary ]]
    -- upvalues: v25 (copy)
    local v81 = {};
    string.gsub(v80, ".", function(v82) --[[ Line: 380 ]]
        -- upvalues: v81 (copy), v25 (ref)
        v81[#v81 + 1] = v25(string.byte(v82), 8);
    end);
    return table.concat(v81);
end;
local function _(v84, v85) --[[ Line: 387 ]] --[[ Name: encode_data ]]
    -- upvalues: v25 (copy), v67 (copy), v83 (copy)
    if v85 == 1 then
        local v86 = "";
        local v87 = nil;
        string.gsub(v84, "..?.?", function(v88) --[[ Line: 342 ]]
            -- upvalues: v87 (ref), v86 (ref), v25 (ref)
            v87 = tonumber(v88);
            if #v88 == 3 then
                v86 = v86 .. v25(v87, 10);
                return;
            elseif #v88 == 2 then
                v86 = v86 .. v25(v87, 7);
                return;
            else
                v86 = v86 .. v25(v87, 4);
                return;
            end;
        end);
        return v86;
    elseif v85 == 2 then
        local v89 = "";
        local v90 = nil;
        local v91 = nil;
        local v92 = nil;
        string.gsub(v84, "..?", function(v93) --[[ Line: 361 ]]
            -- upvalues: v91 (ref), v67 (ref), v92 (ref), v90 (ref), v89 (ref), v25 (ref)
            if #v93 == 2 then
                v91 = v67[string.byte((string.sub(v93, 1, 1)))];
                v92 = v67[string.byte((string.sub(v93, 2, 2)))];
                v90 = v91 * 45 + v92;
                v89 = v89 .. v25(v90, 11);
                return;
            else
                v90 = v67[string.byte(v93)];
                v89 = v89 .. v25(v90, 6);
                return;
            end;
        end);
        return v89;
    elseif v85 == 4 then
        return v83(v84);
    else
        assert(false, "not implemented yet");
        return;
    end;
end;
local function v101(v95, v96, v97) --[[ Line: 401 ]] --[[ Name: add_pad_data ]]
    -- upvalues: v33 (copy)
    local v98 = nil;
    local v99 = nil;
    local v100 = v33[v95][v96] * 8;
    v98 = math.min(4, v100 - #v97);
    if v98 > 0 then
        v97 = v97 .. string.rep("0", v98);
    end;
    if math.fmod(#v97, 8) ~= 0 then
        v99 = 8 - math.fmod(#v97, 8);
        v97 = v97 .. string.rep("0", v99);
    end;
    assert(math.fmod(#v97, 8) == 0);
    while #v97 < v100 do
        v97 = v97 .. "11101100";
        if #v97 < v100 then
            v97 = v97 .. "00010001";
        end;
    end;
    return v97;
end;
local v102 = {
    [0] = 1; 
    2, 
    4, 
    8, 
    16, 
    32, 
    64, 
    128, 
    29, 
    58, 
    116, 
    232, 
    205, 
    135, 
    19, 
    38, 
    76, 
    152, 
    45, 
    90, 
    180, 
    117, 
    234, 
    201, 
    143, 
    3, 
    6, 
    12, 
    24, 
    48, 
    96, 
    192, 
    157, 
    39, 
    78, 
    156, 
    37, 
    74, 
    148, 
    53, 
    106, 
    212, 
    181, 
    119, 
    238, 
    193, 
    159, 
    35, 
    70, 
    140, 
    5, 
    10, 
    20, 
    40, 
    80, 
    160, 
    93, 
    186, 
    105, 
    210, 
    185, 
    111, 
    222, 
    161, 
    95, 
    190, 
    97, 
    194, 
    153, 
    47, 
    94, 
    188, 
    101, 
    202, 
    137, 
    15, 
    30, 
    60, 
    120, 
    240, 
    253, 
    231, 
    211, 
    187, 
    107, 
    214, 
    177, 
    127, 
    254, 
    225, 
    223, 
    163, 
    91, 
    182, 
    113, 
    226, 
    217, 
    175, 
    67, 
    134, 
    17, 
    34, 
    68, 
    136, 
    13, 
    26, 
    52, 
    104, 
    208, 
    189, 
    103, 
    206, 
    129, 
    31, 
    62, 
    124, 
    248, 
    237, 
    199, 
    147, 
    59, 
    118, 
    236, 
    197, 
    151, 
    51, 
    102, 
    204, 
    133, 
    23, 
    46, 
    92, 
    184, 
    109, 
    218, 
    169, 
    79, 
    158, 
    33, 
    66, 
    132, 
    21, 
    42, 
    84, 
    168, 
    77, 
    154, 
    41, 
    82, 
    164, 
    85, 
    170, 
    73, 
    146, 
    57, 
    114, 
    228, 
    213, 
    183, 
    115, 
    230, 
    209, 
    191, 
    99, 
    198, 
    145, 
    63, 
    126, 
    252, 
    229, 
    215, 
    179, 
    123, 
    246, 
    241, 
    255, 
    227, 
    219, 
    171, 
    75, 
    150, 
    49, 
    98, 
    196, 
    149, 
    55, 
    110, 
    220, 
    165, 
    87, 
    174, 
    65, 
    130, 
    25, 
    50, 
    100, 
    200, 
    141, 
    7, 
    14, 
    28, 
    56, 
    112, 
    224, 
    221, 
    167, 
    83, 
    166, 
    81, 
    162, 
    89, 
    178, 
    121, 
    242, 
    249, 
    239, 
    195, 
    155, 
    43, 
    86, 
    172, 
    69, 
    138, 
    9, 
    18, 
    36, 
    72, 
    144, 
    61, 
    122, 
    244, 
    245, 
    247, 
    243, 
    251, 
    235, 
    203, 
    139, 
    11, 
    22, 
    44, 
    88, 
    176, 
    125, 
    250, 
    233, 
    207, 
    131, 
    27, 
    54, 
    108, 
    216, 
    173, 
    71, 
    142, 
    0, 
    0
};
local v103 = {
    [0] = 256; 
    0, 
    1, 
    25, 
    2, 
    50, 
    26, 
    198, 
    3, 
    223, 
    51, 
    238, 
    27, 
    104, 
    199, 
    75, 
    4, 
    100, 
    224, 
    14, 
    52, 
    141, 
    239, 
    129, 
    28, 
    193, 
    105, 
    248, 
    200, 
    8, 
    76, 
    113, 
    5, 
    138, 
    101, 
    47, 
    225, 
    36, 
    15, 
    33, 
    53, 
    147, 
    142, 
    218, 
    240, 
    18, 
    130, 
    69, 
    29, 
    181, 
    194, 
    125, 
    106, 
    39, 
    249, 
    185, 
    201, 
    154, 
    9, 
    120, 
    77, 
    228, 
    114, 
    166, 
    6, 
    191, 
    139, 
    98, 
    102, 
    221, 
    48, 
    253, 
    226, 
    152, 
    37, 
    179, 
    16, 
    145, 
    34, 
    136, 
    54, 
    208, 
    148, 
    206, 
    143, 
    150, 
    219, 
    189, 
    241, 
    210, 
    19, 
    92, 
    131, 
    56, 
    70, 
    64, 
    30, 
    66, 
    182, 
    163, 
    195, 
    72, 
    126, 
    110, 
    107, 
    58, 
    40, 
    84, 
    250, 
    133, 
    186, 
    61, 
    202, 
    94, 
    155, 
    159, 
    10, 
    21, 
    121, 
    43, 
    78, 
    212, 
    229, 
    172, 
    115, 
    243, 
    167, 
    87, 
    7, 
    112, 
    192, 
    247, 
    140, 
    128, 
    99, 
    13, 
    103, 
    74, 
    222, 
    237, 
    49, 
    197, 
    254, 
    24, 
    227, 
    165, 
    153, 
    119, 
    38, 
    184, 
    180, 
    124, 
    17, 
    68, 
    146, 
    217, 
    35, 
    32, 
    137, 
    46, 
    55, 
    63, 
    209, 
    91, 
    149, 
    188, 
    207, 
    205, 
    144, 
    135, 
    151, 
    178, 
    220, 
    252, 
    190, 
    97, 
    242, 
    86, 
    211, 
    171, 
    20, 
    42, 
    93, 
    158, 
    132, 
    60, 
    57, 
    83, 
    71, 
    109, 
    65, 
    162, 
    31, 
    45, 
    67, 
    216, 
    183, 
    123, 
    164, 
    118, 
    196, 
    23, 
    73, 
    236, 
    127, 
    12, 
    111, 
    246, 
    108, 
    161, 
    59, 
    82, 
    41, 
    157, 
    85, 
    170, 
    251, 
    96, 
    134, 
    177, 
    187, 
    204, 
    62, 
    90, 
    203, 
    89, 
    95, 
    176, 
    156, 
    169, 
    160, 
    81, 
    11, 
    245, 
    22, 
    235, 
    122, 
    117, 
    44, 
    215, 
    79, 
    174, 
    213, 
    233, 
    230, 
    231, 
    173, 
    232, 
    116, 
    214, 
    244, 
    234, 
    168, 
    80, 
    88, 
    175
};
local v104 = {
    [7] = {
        21, 
        102, 
        238, 
        149, 
        146, 
        229, 
        87, 
        0
    }, 
    [10] = {
        45, 
        32, 
        94, 
        64, 
        70, 
        118, 
        61, 
        46, 
        67, 
        251, 
        0
    }, 
    [13] = {
        78, 
        140, 
        206, 
        218, 
        130, 
        104, 
        106, 
        100, 
        86, 
        100, 
        176, 
        152, 
        74, 
        0
    }, 
    [15] = {
        105, 
        99, 
        5, 
        124, 
        140, 
        237, 
        58, 
        58, 
        51, 
        37, 
        202, 
        91, 
        61, 
        183, 
        8, 
        0
    }, 
    [16] = {
        120, 
        225, 
        194, 
        182, 
        169, 
        147, 
        191, 
        91, 
        3, 
        76, 
        161, 
        102, 
        109, 
        107, 
        104, 
        120, 
        0
    }, 
    [17] = {
        136, 
        163, 
        243, 
        39, 
        150, 
        99, 
        24, 
        147, 
        214, 
        206, 
        123, 
        239, 
        43, 
        78, 
        206, 
        139, 
        43, 
        0
    }, 
    [18] = {
        153, 
        96, 
        98, 
        5, 
        179, 
        252, 
        148, 
        152, 
        187, 
        79, 
        170, 
        118, 
        97, 
        184, 
        94, 
        158, 
        234, 
        215, 
        0
    }, 
    [20] = {
        190, 
        188, 
        212, 
        212, 
        164, 
        156, 
        239, 
        83, 
        225, 
        221, 
        180, 
        202, 
        187, 
        26, 
        163, 
        61, 
        50, 
        79, 
        60, 
        17, 
        0
    }, 
    [22] = {
        231, 
        165, 
        105, 
        160, 
        134, 
        219, 
        80, 
        98, 
        172, 
        8, 
        74, 
        200, 
        53, 
        221, 
        109, 
        14, 
        230, 
        93, 
        242, 
        247, 
        171, 
        210, 
        0
    }, 
    [24] = {
        21, 
        227, 
        96, 
        87, 
        232, 
        117, 
        0, 
        111, 
        218, 
        228, 
        226, 
        192, 
        152, 
        169, 
        180, 
        159, 
        126, 
        251, 
        117, 
        211, 
        48, 
        135, 
        121, 
        229, 
        0
    }, 
    [26] = {
        70, 
        218, 
        145, 
        153, 
        227, 
        48, 
        102, 
        13, 
        142, 
        245, 
        21, 
        161, 
        53, 
        165, 
        28, 
        111, 
        201, 
        145, 
        17, 
        118, 
        182, 
        103, 
        2, 
        158, 
        125, 
        173, 
        0
    }, 
    [28] = {
        123, 
        9, 
        37, 
        242, 
        119, 
        212, 
        195, 
        42, 
        87, 
        245, 
        43, 
        21, 
        201, 
        232, 
        27, 
        205, 
        147, 
        195, 
        190, 
        110, 
        180, 
        108, 
        234, 
        224, 
        104, 
        200, 
        223, 
        168, 
        0
    }, 
    [30] = {
        180, 
        192, 
        40, 
        238, 
        216, 
        251, 
        37, 
        156, 
        130, 
        224, 
        193, 
        226, 
        173, 
        42, 
        125, 
        222, 
        96, 
        239, 
        86, 
        110, 
        48, 
        50, 
        182, 
        179, 
        31, 
        216, 
        152, 
        145, 
        173, 
        41, 
        0
    }
};
local function v109(v105) --[[ Line: 496 ]] --[[ Name: convert_bitstring_to_bytes ]]
    local v106 = {};
    local _ = string.gsub(v105, "(........)", function(v107) --[[ Line: 498 ]]
        -- upvalues: v106 (copy)
        v106[#v106 + 1] = tonumber(v107, 2);
    end);
    return v106;
end;
local function v116(v110, v111) --[[ Line: 506 ]] --[[ Name: get_generator_polynominal_adjusted ]]
    -- upvalues: v104 (copy)
    local v112 = {
        [0] = 0
    };
    for v113 = 0, v111 - v110 - 1 do
        v112[v113] = 0;
    end;
    local v114 = v104[v110];
    for v115 = 1, v110 + 1 do
        v112[v111 - v110 + v115 - 1] = v114[v115];
    end;
    return v112;
end;
local function _(v117) --[[ Line: 521 ]] --[[ Name: convert_to_alpha ]]
    -- upvalues: v103 (copy)
    local v118 = {};
    for v119 = 0, #v117 do
        v118[v119] = v103[v117[v119]];
    end;
    return v118;
end;
local _ = function(v121, _) --[[ Line: 530 ]] --[[ Name: convert_to_int ]]
    -- upvalues: v102 (copy)
    local v123 = {};
    for v124 = 0, #v121 do
        v123[v124] = v102[v121[v124]];
    end;
    return v123;
end;
local function v155(v126, v127) --[[ Line: 539 ]] --[[ Name: calculate_error_correction ]]
    -- upvalues: v103 (copy), v116 (copy), v102 (copy), v17 (copy)
    local v128 = nil;
    if type(v126) == "string" then
        local v129 = {};
        local l_v129_0 = v129 --[[ copy: 3 -> 17 ]];
        local _ = string.gsub(v126, "(........)", function(v131) --[[ Line: 498 ]]
            -- upvalues: l_v129_0 (copy)
            l_v129_0[#l_v129_0 + 1] = tonumber(v131, 2);
        end);
        v128 = v129;
    elseif type(v126) == "table" then
        v128 = v126;
    else
        assert(false, "Unknown type for data: %s", (type(v126)));
    end;
    local v133 = #v128;
    local v134 = v133 + v127 - 1;
    local v135 = nil;
    local v136 = nil;
    local _ = nil;
    local v138 = {};
    local v139 = {};
    local v140 = {};
    for v141 = 1, v133 do
        v139[v134 - v141 + 1] = v128[v141];
    end;
    for v142 = 1, v134 - v133 do
        v139[v142] = 0;
    end;
    v139[0] = 0;
    local l_v139_0 = v139;
    local v144 = {};
    for v145 = 0, #l_v139_0 do
        v144[v145] = v103[l_v139_0[v145]];
    end;
    v140 = v144;
    while v127 <= v134 do
        v135 = v116(v127, v134);
        l_v139_0 = v140[v134];
        for v146 = v134, v134 - v127, -1 do
            if l_v139_0 ~= 256 then
                if v135[v146] + l_v139_0 >= 255 then
                    v135[v146] = math.fmod(v135[v146] + l_v139_0, 255);
                else
                    v135[v146] = v135[v146] + l_v139_0;
                end;
            else
                v135[v146] = 256;
            end;
        end;
        for v147 = v134 - v127 - 1, 0, -1 do
            v135[v147] = 256;
        end;
        v144 = v135;
        local v148 = {};
        for v149 = 0, #v144 do
            v148[v149] = v102[v144[v149]];
        end;
        v138 = v148;
        v144 = v140;
        v148 = {};
        for v150 = 0, #v144 do
            v148[v150] = v102[v144[v150]];
        end;
        v139 = v148;
        v136 = {};
        for v151 = v134, 0, -1 do
            v136[v151] = v17(v138[v151], v139[v151]);
        end;
        for v152 = v134, 0, -1 do
            if v152 >= v127 and v136[v152] == 0 then
                v136[v152] = nil;
                v134 = v134 - 1;
            else
                break;
            end;
        end;
        v139 = v136;
        v144 = v139;
        v148 = {};
        for v153 = 0, #v144 do
            v148[v153] = v103[v144[v153]];
        end;
        v140 = v148;
    end;
    l_v139_0 = {};
    for v154 = #v139, 0, -1 do
        l_v139_0[#l_v139_0 + 1] = v139[v154];
    end;
    return l_v139_0;
end;
local v156 = {
    {
        {
            1, 
            {
                26, 
                19, 
                2
            }
        }, 
        {
            1, 
            {
                26, 
                16, 
                4
            }
        }, 
        {
            1, 
            {
                26, 
                13, 
                6
            }
        }, 
        {
            1, 
            {
                26, 
                9, 
                8
            }
        }
    }, 
    {
        {
            1, 
            {
                44, 
                34, 
                4
            }
        }, 
        {
            1, 
            {
                44, 
                28, 
                8
            }
        }, 
        {
            1, 
            {
                44, 
                22, 
                11
            }
        }, 
        {
            1, 
            {
                44, 
                16, 
                14
            }
        }
    }, 
    {
        {
            1, 
            {
                70, 
                55, 
                7
            }
        }, 
        {
            1, 
            {
                70, 
                44, 
                13
            }
        }, 
        {
            2, 
            {
                35, 
                17, 
                9
            }
        }, 
        {
            2, 
            {
                35, 
                13, 
                11
            }
        }
    }, 
    {
        {
            1, 
            {
                100, 
                80, 
                10
            }
        }, 
        {
            2, 
            {
                50, 
                32, 
                9
            }
        }, 
        {
            2, 
            {
                50, 
                24, 
                13
            }
        }, 
        {
            4, 
            {
                25, 
                9, 
                8
            }
        }
    }, 
    {
        {
            1, 
            {
                134, 
                108, 
                13
            }
        }, 
        {
            2, 
            {
                67, 
                43, 
                12
            }
        }, 
        {
            2, 
            {
                33, 
                15, 
                9
            }, 
            2, 
            {
                34, 
                16, 
                9
            }
        }, 
        {
            2, 
            {
                33, 
                11, 
                11
            }, 
            2, 
            {
                34, 
                12, 
                11
            }
        }
    }, 
    {
        {
            2, 
            {
                86, 
                68, 
                9
            }
        }, 
        {
            4, 
            {
                43, 
                27, 
                8
            }
        }, 
        {
            4, 
            {
                43, 
                19, 
                12
            }
        }, 
        {
            4, 
            {
                43, 
                15, 
                14
            }
        }
    }, 
    {
        {
            2, 
            {
                98, 
                78, 
                10
            }
        }, 
        {
            4, 
            {
                49, 
                31, 
                9
            }
        }, 
        {
            2, 
            {
                32, 
                14, 
                9
            }, 
            4, 
            {
                33, 
                15, 
                9
            }
        }, 
        {
            4, 
            {
                39, 
                13, 
                13
            }, 
            1, 
            {
                40, 
                14, 
                13
            }
        }
    }, 
    {
        {
            2, 
            {
                121, 
                97, 
                12
            }
        }, 
        {
            2, 
            {
                60, 
                38, 
                11
            }, 
            2, 
            {
                61, 
                39, 
                11
            }
        }, 
        {
            4, 
            {
                40, 
                18, 
                11
            }, 
            2, 
            {
                41, 
                19, 
                11
            }
        }, 
        {
            4, 
            {
                40, 
                14, 
                13
            }, 
            2, 
            {
                41, 
                15, 
                13
            }
        }
    }, 
    {
        {
            2, 
            {
                146, 
                116, 
                15
            }
        }, 
        {
            3, 
            {
                58, 
                36, 
                11
            }, 
            2, 
            {
                59, 
                37, 
                11
            }
        }, 
        {
            4, 
            {
                36, 
                16, 
                10
            }, 
            4, 
            {
                37, 
                17, 
                10
            }
        }, 
        {
            4, 
            {
                36, 
                12, 
                12
            }, 
            4, 
            {
                37, 
                13, 
                12
            }
        }
    }, 
    {
        {
            2, 
            {
                86, 
                68, 
                9
            }, 
            2, 
            {
                87, 
                69, 
                9
            }
        }, 
        {
            4, 
            {
                69, 
                43, 
                13
            }, 
            1, 
            {
                70, 
                44, 
                13
            }
        }, 
        {
            6, 
            {
                43, 
                19, 
                12
            }, 
            2, 
            {
                44, 
                20, 
                12
            }
        }, 
        {
            6, 
            {
                43, 
                15, 
                14
            }, 
            2, 
            {
                44, 
                16, 
                14
            }
        }
    }, 
    {
        {
            4, 
            {
                101, 
                81, 
                10
            }
        }, 
        {
            1, 
            {
                80, 
                50, 
                15
            }, 
            4, 
            {
                81, 
                51, 
                15
            }
        }, 
        {
            4, 
            {
                50, 
                22, 
                14
            }, 
            4, 
            {
                51, 
                23, 
                14
            }
        }, 
        {
            3, 
            {
                36, 
                12, 
                12
            }, 
            8, 
            {
                37, 
                13, 
                12
            }
        }
    }, 
    {
        {
            2, 
            {
                116, 
                92, 
                12
            }, 
            2, 
            {
                117, 
                93, 
                12
            }
        }, 
        {
            6, 
            {
                58, 
                36, 
                11
            }, 
            2, 
            {
                59, 
                37, 
                11
            }
        }, 
        {
            4, 
            {
                46, 
                20, 
                13
            }, 
            6, 
            {
                47, 
                21, 
                13
            }
        }, 
        {
            7, 
            {
                42, 
                14, 
                14
            }, 
            4, 
            {
                43, 
                15, 
                14
            }
        }
    }, 
    {
        {
            4, 
            {
                133, 
                107, 
                13
            }
        }, 
        {
            8, 
            {
                59, 
                37, 
                11
            }, 
            1, 
            {
                60, 
                38, 
                11
            }
        }, 
        {
            8, 
            {
                44, 
                20, 
                12
            }, 
            4, 
            {
                45, 
                21, 
                12
            }
        }, 
        {
            12, 
            {
                33, 
                11, 
                11
            }, 
            4, 
            {
                34, 
                12, 
                11
            }
        }
    }, 
    {
        {
            3, 
            {
                145, 
                115, 
                15
            }, 
            1, 
            {
                146, 
                116, 
                15
            }
        }, 
        {
            4, 
            {
                64, 
                40, 
                12
            }, 
            5, 
            {
                65, 
                41, 
                12
            }
        }, 
        {
            11, 
            {
                36, 
                16, 
                10
            }, 
            5, 
            {
                37, 
                17, 
                10
            }
        }, 
        {
            11, 
            {
                36, 
                12, 
                12
            }, 
            5, 
            {
                37, 
                13, 
                12
            }
        }
    }, 
    {
        {
            5, 
            {
                109, 
                87, 
                11
            }, 
            1, 
            {
                110, 
                88, 
                11
            }
        }, 
        {
            5, 
            {
                65, 
                41, 
                12
            }, 
            5, 
            {
                66, 
                42, 
                12
            }
        }, 
        {
            5, 
            {
                54, 
                24, 
                15
            }, 
            7, 
            {
                55, 
                25, 
                15
            }
        }, 
        {
            11, 
            {
                36, 
                12, 
                12
            }, 
            7, 
            {
                37, 
                13, 
                12
            }
        }
    }, 
    {
        {
            5, 
            {
                122, 
                98, 
                12
            }, 
            1, 
            {
                123, 
                99, 
                12
            }
        }, 
        {
            7, 
            {
                73, 
                45, 
                14
            }, 
            3, 
            {
                74, 
                46, 
                14
            }
        }, 
        {
            15, 
            {
                43, 
                19, 
                12
            }, 
            2, 
            {
                44, 
                20, 
                12
            }
        }, 
        {
            3, 
            {
                45, 
                15, 
                15
            }, 
            13, 
            {
                46, 
                16, 
                15
            }
        }
    }, 
    {
        {
            1, 
            {
                135, 
                107, 
                14
            }, 
            5, 
            {
                136, 
                108, 
                14
            }
        }, 
        {
            10, 
            {
                74, 
                46, 
                14
            }, 
            1, 
            {
                75, 
                47, 
                14
            }
        }, 
        {
            1, 
            {
                50, 
                22, 
                14
            }, 
            15, 
            {
                51, 
                23, 
                14
            }
        }, 
        {
            2, 
            {
                42, 
                14, 
                14
            }, 
            17, 
            {
                43, 
                15, 
                14
            }
        }
    }, 
    {
        {
            5, 
            {
                150, 
                120, 
                15
            }, 
            1, 
            {
                151, 
                121, 
                15
            }
        }, 
        {
            9, 
            {
                69, 
                43, 
                13
            }, 
            4, 
            {
                70, 
                44, 
                13
            }
        }, 
        {
            17, 
            {
                50, 
                22, 
                14
            }, 
            1, 
            {
                51, 
                23, 
                14
            }
        }, 
        {
            2, 
            {
                42, 
                14, 
                14
            }, 
            19, 
            {
                43, 
                15, 
                14
            }
        }
    }, 
    {
        {
            3, 
            {
                141, 
                113, 
                14
            }, 
            4, 
            {
                142, 
                114, 
                14
            }
        }, 
        {
            3, 
            {
                70, 
                44, 
                13
            }, 
            11, 
            {
                71, 
                45, 
                13
            }
        }, 
        {
            17, 
            {
                47, 
                21, 
                13
            }, 
            4, 
            {
                48, 
                22, 
                13
            }
        }, 
        {
            9, 
            {
                39, 
                13, 
                13
            }, 
            16, 
            {
                40, 
                14, 
                13
            }
        }
    }, 
    {
        {
            3, 
            {
                135, 
                107, 
                14
            }, 
            5, 
            {
                136, 
                108, 
                14
            }
        }, 
        {
            3, 
            {
                67, 
                41, 
                13
            }, 
            13, 
            {
                68, 
                42, 
                13
            }
        }, 
        {
            15, 
            {
                54, 
                24, 
                15
            }, 
            5, 
            {
                55, 
                25, 
                15
            }
        }, 
        {
            15, 
            {
                43, 
                15, 
                14
            }, 
            10, 
            {
                44, 
                16, 
                14
            }
        }
    }, 
    {
        {
            4, 
            {
                144, 
                116, 
                14
            }, 
            4, 
            {
                145, 
                117, 
                14
            }
        }, 
        {
            17, 
            {
                68, 
                42, 
                13
            }
        }, 
        {
            17, 
            {
                50, 
                22, 
                14
            }, 
            6, 
            {
                51, 
                23, 
                14
            }
        }, 
        {
            19, 
            {
                46, 
                16, 
                15
            }, 
            6, 
            {
                47, 
                17, 
                15
            }
        }
    }, 
    {
        {
            2, 
            {
                139, 
                111, 
                14
            }, 
            7, 
            {
                140, 
                112, 
                14
            }
        }, 
        {
            17, 
            {
                74, 
                46, 
                14
            }
        }, 
        {
            7, 
            {
                54, 
                24, 
                15
            }, 
            16, 
            {
                55, 
                25, 
                15
            }
        }, 
        {
            34, 
            {
                37, 
                13, 
                12
            }
        }
    }, 
    {
        {
            4, 
            {
                151, 
                121, 
                15
            }, 
            5, 
            {
                152, 
                122, 
                15
            }
        }, 
        {
            4, 
            {
                75, 
                47, 
                14
            }, 
            14, 
            {
                76, 
                48, 
                14
            }
        }, 
        {
            11, 
            {
                54, 
                24, 
                15
            }, 
            14, 
            {
                55, 
                25, 
                15
            }
        }, 
        {
            16, 
            {
                45, 
                15, 
                15
            }, 
            14, 
            {
                46, 
                16, 
                15
            }
        }
    }, 
    {
        {
            6, 
            {
                147, 
                117, 
                15
            }, 
            4, 
            {
                148, 
                118, 
                15
            }
        }, 
        {
            6, 
            {
                73, 
                45, 
                14
            }, 
            14, 
            {
                74, 
                46, 
                14
            }
        }, 
        {
            11, 
            {
                54, 
                24, 
                15
            }, 
            16, 
            {
                55, 
                25, 
                15
            }
        }, 
        {
            30, 
            {
                46, 
                16, 
                15
            }, 
            2, 
            {
                47, 
                17, 
                15
            }
        }
    }, 
    {
        {
            8, 
            {
                132, 
                106, 
                13
            }, 
            4, 
            {
                133, 
                107, 
                13
            }
        }, 
        {
            8, 
            {
                75, 
                47, 
                14
            }, 
            13, 
            {
                76, 
                48, 
                14
            }
        }, 
        {
            7, 
            {
                54, 
                24, 
                15
            }, 
            22, 
            {
                55, 
                25, 
                15
            }
        }, 
        {
            22, 
            {
                45, 
                15, 
                15
            }, 
            13, 
            {
                46, 
                16, 
                15
            }
        }
    }, 
    {
        {
            10, 
            {
                142, 
                114, 
                14
            }, 
            2, 
            {
                143, 
                115, 
                14
            }
        }, 
        {
            19, 
            {
                74, 
                46, 
                14
            }, 
            4, 
            {
                75, 
                47, 
                14
            }
        }, 
        {
            28, 
            {
                50, 
                22, 
                14
            }, 
            6, 
            {
                51, 
                23, 
                14
            }
        }, 
        {
            33, 
            {
                46, 
                16, 
                15
            }, 
            4, 
            {
                47, 
                17, 
                15
            }
        }
    }, 
    {
        {
            8, 
            {
                152, 
                122, 
                15
            }, 
            4, 
            {
                153, 
                123, 
                15
            }
        }, 
        {
            22, 
            {
                73, 
                45, 
                14
            }, 
            3, 
            {
                74, 
                46, 
                14
            }
        }, 
        {
            8, 
            {
                53, 
                23, 
                15
            }, 
            26, 
            {
                54, 
                24, 
                15
            }
        }, 
        {
            12, 
            {
                45, 
                15, 
                15
            }, 
            28, 
            {
                46, 
                16, 
                15
            }
        }
    }, 
    {
        {
            3, 
            {
                147, 
                117, 
                15
            }, 
            10, 
            {
                148, 
                118, 
                15
            }
        }, 
        {
            3, 
            {
                73, 
                45, 
                14
            }, 
            23, 
            {
                74, 
                46, 
                14
            }
        }, 
        {
            4, 
            {
                54, 
                24, 
                15
            }, 
            31, 
            {
                55, 
                25, 
                15
            }
        }, 
        {
            11, 
            {
                45, 
                15, 
                15
            }, 
            31, 
            {
                46, 
                16, 
                15
            }
        }
    }, 
    {
        {
            7, 
            {
                146, 
                116, 
                15
            }, 
            7, 
            {
                147, 
                117, 
                15
            }
        }, 
        {
            21, 
            {
                73, 
                45, 
                14
            }, 
            7, 
            {
                74, 
                46, 
                14
            }
        }, 
        {
            1, 
            {
                53, 
                23, 
                15
            }, 
            37, 
            {
                54, 
                24, 
                15
            }
        }, 
        {
            19, 
            {
                45, 
                15, 
                15
            }, 
            26, 
            {
                46, 
                16, 
                15
            }
        }
    }, 
    {
        {
            5, 
            {
                145, 
                115, 
                15
            }, 
            10, 
            {
                146, 
                116, 
                15
            }
        }, 
        {
            19, 
            {
                75, 
                47, 
                14
            }, 
            10, 
            {
                76, 
                48, 
                14
            }
        }, 
        {
            15, 
            {
                54, 
                24, 
                15
            }, 
            25, 
            {
                55, 
                25, 
                15
            }
        }, 
        {
            23, 
            {
                45, 
                15, 
                15
            }, 
            25, 
            {
                46, 
                16, 
                15
            }
        }
    }, 
    {
        {
            13, 
            {
                145, 
                115, 
                15
            }, 
            3, 
            {
                146, 
                116, 
                15
            }
        }, 
        {
            2, 
            {
                74, 
                46, 
                14
            }, 
            29, 
            {
                75, 
                47, 
                14
            }
        }, 
        {
            42, 
            {
                54, 
                24, 
                15
            }, 
            1, 
            {
                55, 
                25, 
                15
            }
        }, 
        {
            23, 
            {
                45, 
                15, 
                15
            }, 
            28, 
            {
                46, 
                16, 
                15
            }
        }
    }, 
    {
        {
            17, 
            {
                145, 
                115, 
                15
            }
        }, 
        {
            10, 
            {
                74, 
                46, 
                14
            }, 
            23, 
            {
                75, 
                47, 
                14
            }
        }, 
        {
            10, 
            {
                54, 
                24, 
                15
            }, 
            35, 
            {
                55, 
                25, 
                15
            }
        }, 
        {
            19, 
            {
                45, 
                15, 
                15
            }, 
            35, 
            {
                46, 
                16, 
                15
            }
        }
    }, 
    {
        {
            17, 
            {
                145, 
                115, 
                15
            }, 
            1, 
            {
                146, 
                116, 
                15
            }
        }, 
        {
            14, 
            {
                74, 
                46, 
                14
            }, 
            21, 
            {
                75, 
                47, 
                14
            }
        }, 
        {
            29, 
            {
                54, 
                24, 
                15
            }, 
            19, 
            {
                55, 
                25, 
                15
            }
        }, 
        {
            11, 
            {
                45, 
                15, 
                15
            }, 
            46, 
            {
                46, 
                16, 
                15
            }
        }
    }, 
    {
        {
            13, 
            {
                145, 
                115, 
                15
            }, 
            6, 
            {
                146, 
                116, 
                15
            }
        }, 
        {
            14, 
            {
                74, 
                46, 
                14
            }, 
            23, 
            {
                75, 
                47, 
                14
            }
        }, 
        {
            44, 
            {
                54, 
                24, 
                15
            }, 
            7, 
            {
                55, 
                25, 
                15
            }
        }, 
        {
            59, 
            {
                46, 
                16, 
                15
            }, 
            1, 
            {
                47, 
                17, 
                15
            }
        }
    }, 
    {
        {
            12, 
            {
                151, 
                121, 
                15
            }, 
            7, 
            {
                152, 
                122, 
                15
            }
        }, 
        {
            12, 
            {
                75, 
                47, 
                14
            }, 
            26, 
            {
                76, 
                48, 
                14
            }
        }, 
        {
            39, 
            {
                54, 
                24, 
                15
            }, 
            14, 
            {
                55, 
                25, 
                15
            }
        }, 
        {
            22, 
            {
                45, 
                15, 
                15
            }, 
            41, 
            {
                46, 
                16, 
                15
            }
        }
    }, 
    {
        {
            6, 
            {
                151, 
                121, 
                15
            }, 
            14, 
            {
                152, 
                122, 
                15
            }
        }, 
        {
            6, 
            {
                75, 
                47, 
                14
            }, 
            34, 
            {
                76, 
                48, 
                14
            }
        }, 
        {
            46, 
            {
                54, 
                24, 
                15
            }, 
            10, 
            {
                55, 
                25, 
                15
            }
        }, 
        {
            2, 
            {
                45, 
                15, 
                15
            }, 
            64, 
            {
                46, 
                16, 
                15
            }
        }
    }, 
    {
        {
            17, 
            {
                152, 
                122, 
                15
            }, 
            4, 
            {
                153, 
                123, 
                15
            }
        }, 
        {
            29, 
            {
                74, 
                46, 
                14
            }, 
            14, 
            {
                75, 
                47, 
                14
            }
        }, 
        {
            49, 
            {
                54, 
                24, 
                15
            }, 
            10, 
            {
                55, 
                25, 
                15
            }
        }, 
        {
            24, 
            {
                45, 
                15, 
                15
            }, 
            46, 
            {
                46, 
                16, 
                15
            }
        }
    }, 
    {
        {
            4, 
            {
                152, 
                122, 
                15
            }, 
            18, 
            {
                153, 
                123, 
                15
            }
        }, 
        {
            13, 
            {
                74, 
                46, 
                14
            }, 
            32, 
            {
                75, 
                47, 
                14
            }
        }, 
        {
            48, 
            {
                54, 
                24, 
                15
            }, 
            14, 
            {
                55, 
                25, 
                15
            }
        }, 
        {
            42, 
            {
                45, 
                15, 
                15
            }, 
            32, 
            {
                46, 
                16, 
                15
            }
        }
    }, 
    {
        {
            20, 
            {
                147, 
                117, 
                15
            }, 
            4, 
            {
                148, 
                118, 
                15
            }
        }, 
        {
            40, 
            {
                75, 
                47, 
                14
            }, 
            7, 
            {
                76, 
                48, 
                14
            }
        }, 
        {
            43, 
            {
                54, 
                24, 
                15
            }, 
            22, 
            {
                55, 
                25, 
                15
            }
        }, 
        {
            10, 
            {
                45, 
                15, 
                15
            }, 
            67, 
            {
                46, 
                16, 
                15
            }
        }
    }, 
    {
        {
            19, 
            {
                148, 
                118, 
                15
            }, 
            6, 
            {
                149, 
                119, 
                15
            }
        }, 
        {
            18, 
            {
                75, 
                47, 
                14
            }, 
            31, 
            {
                76, 
                48, 
                14
            }
        }, 
        {
            34, 
            {
                54, 
                24, 
                15
            }, 
            34, 
            {
                55, 
                25, 
                15
            }
        }, 
        {
            20, 
            {
                45, 
                15, 
                15
            }, 
            61, 
            {
                46, 
                16, 
                15
            }
        }
    }
};
local v157 = {
    0, 
    7, 
    7, 
    7, 
    7, 
    7, 
    0, 
    0, 
    0, 
    0, 
    0, 
    0, 
    0, 
    3, 
    3, 
    3, 
    3, 
    3, 
    3, 
    3, 
    4, 
    4, 
    4, 
    4, 
    4, 
    4, 
    4, 
    3, 
    3, 
    3, 
    3, 
    3, 
    3, 
    3, 
    0, 
    0, 
    0, 
    0, 
    0, 
    0
};
local function v178(v158, v159, v160) --[[ Line: 710 ]] --[[ Name: arrange_codewords_and_calculate_ec ]]
    -- upvalues: v25 (copy), v156 (copy), v155 (copy)
    if type(v160) == "table" then
        local v161 = "";
        for v162 = 1, #v160 do
            v161 = v161 .. v25(v160[v162], 8);
        end;
        v160 = v161;
    end;
    local v163 = v156[v158][v159];
    local v164 = nil;
    local v165 = nil;
    local v166 = {};
    local v167 = {};
    local v168 = 1;
    local v169 = 0;
    local v170 = 0;
    for v171 = 1, #v163 / 2 do
        for _ = 1, v163[2 * v171 - 1] do
            v164 = v163[2 * v171][2];
            v165 = v163[2 * v171][1] - v163[2 * v171][2];
            v170 = v170 + v165 * 8;
            v166[#v166 + 1] = string.sub(v160, v169 * 8 + 1, (v169 + v164) * 8);
            tmp_tab = v155(v166[#v166], v165);
            tmp_str = "";
            for v173 = 1, #tmp_tab do
                tmp_str = tmp_str .. v25(tmp_tab[v173], 8);
            end;
            v167[#v167 + 1] = tmp_str;
            v169 = v169 + v164;
            v168 = v168 + 1;
        end;
    end;
    local v174 = "";
    v169 = 1;
    repeat
        for v175 = 1, #v166 do
            if v169 < #v166[v175] then
                v174 = v174 .. string.sub(v166[v175], v169, v169 + 7);
            end;
        end;
        v169 = v169 + 8;
    until #v174 == #v160;
    local v176 = "";
    v169 = 1;
    repeat
        for v177 = 1, #v167 do
            if v169 < #v167[v177] then
                v176 = v176 .. string.sub(v167[v177], v169, v169 + 7);
            end;
        end;
        v169 = v169 + 8;
    until #v176 == v170;
    return v174 .. v176;
end;
local function v186(v179) --[[ Line: 786 ]] --[[ Name: add_position_detection_patterns ]]
    local v180 = #v179;
    for v181 = 1, 8 do
        for v182 = 1, 8 do
            v179[v181][v182] = -2;
            v179[v180 - 8 + v181][v182] = -2;
            v179[v181][v180 - 8 + v182] = -2;
        end;
    end;
    for v183 = 1, 7 do
        v179[1][v183] = 2;
        v179[7][v183] = 2;
        v179[v183][1] = 2;
        v179[v183][7] = 2;
        v179[v180][v183] = 2;
        v179[v180 - 6][v183] = 2;
        v179[v180 - v183 + 1][1] = 2;
        v179[v180 - v183 + 1][7] = 2;
        v179[1][v180 - v183 + 1] = 2;
        v179[7][v180 - v183 + 1] = 2;
        v179[v183][v180 - 6] = 2;
        v179[v183][v180] = 2;
    end;
    for v184 = 1, 3 do
        for v185 = 1, 3 do
            v179[2 + v185][v184 + 2] = 2;
            v179[v180 - v185 - 1][v184 + 2] = 2;
            v179[2 + v185][v180 - v184 - 1] = 2;
        end;
    end;
end;
local function v192(v187) --[[ Line: 831 ]] --[[ Name: add_timing_pattern ]]
    local v188 = nil;
    local v189 = nil;
    v188 = 7;
    v189 = 9;
    for v190 = v189, #v187 - 8 do
        if math.fmod(v190, 2) == 1 then
            v187[v190][v188] = 2;
        else
            v187[v190][v188] = -2;
        end;
    end;
    for v191 = v189, #v187 - 8 do
        if math.fmod(v191, 2) == 1 then
            v187[v188][v191] = 2;
        else
            v187[v188][v191] = -2;
        end;
    end;
end;
local v193 = {
    {}, 
    {
        6, 
        18
    }, 
    {
        6, 
        22
    }, 
    {
        6, 
        26
    }, 
    {
        6, 
        30
    }, 
    {
        6, 
        34
    }, 
    {
        6, 
        22, 
        38
    }, 
    {
        6, 
        24, 
        42
    }, 
    {
        6, 
        26, 
        46
    }, 
    {
        6, 
        28, 
        50
    }, 
    {
        6, 
        30, 
        54
    }, 
    {
        6, 
        32, 
        58
    }, 
    {
        6, 
        34, 
        62
    }, 
    {
        6, 
        26, 
        46, 
        66
    }, 
    {
        6, 
        26, 
        48, 
        70
    }, 
    {
        6, 
        26, 
        50, 
        74
    }, 
    {
        6, 
        30, 
        54, 
        78
    }, 
    {
        6, 
        30, 
        56, 
        82
    }, 
    {
        6, 
        30, 
        58, 
        86
    }, 
    {
        6, 
        34, 
        62, 
        90
    }, 
    {
        6, 
        28, 
        50, 
        72, 
        94
    }, 
    {
        6, 
        26, 
        50, 
        74, 
        98
    }, 
    {
        6, 
        30, 
        54, 
        78, 
        102
    }, 
    {
        6, 
        28, 
        54, 
        80, 
        106
    }, 
    {
        6, 
        32, 
        58, 
        84, 
        110
    }, 
    {
        6, 
        30, 
        58, 
        86, 
        114
    }, 
    {
        6, 
        34, 
        62, 
        90, 
        118
    }, 
    {
        6, 
        26, 
        50, 
        74, 
        98, 
        122
    }, 
    {
        6, 
        30, 
        54, 
        78, 
        102, 
        126
    }, 
    {
        6, 
        26, 
        52, 
        78, 
        104, 
        130
    }, 
    {
        6, 
        30, 
        56, 
        82, 
        108, 
        134
    }, 
    {
        6, 
        34, 
        60, 
        86, 
        112, 
        138
    }, 
    {
        6, 
        30, 
        58, 
        86, 
        114, 
        142
    }, 
    {
        6, 
        34, 
        62, 
        90, 
        118, 
        146
    }, 
    {
        6, 
        30, 
        54, 
        78, 
        102, 
        126, 
        150
    }, 
    {
        6, 
        24, 
        50, 
        76, 
        102, 
        128, 
        154
    }, 
    {
        6, 
        28, 
        54, 
        80, 
        106, 
        132, 
        158
    }, 
    {
        6, 
        32, 
        58, 
        84, 
        110, 
        136, 
        162
    }, 
    {
        6, 
        26, 
        54, 
        82, 
        110, 
        138, 
        166
    }, 
    {
        6, 
        30, 
        58, 
        86, 
        114, 
        142, 
        170
    }
};
local function v200(v194) --[[ Line: 873 ]] --[[ Name: add_alignment_pattern ]]
    -- upvalues: v193 (copy)
    local v195 = v193[(#v194 - 17) / 4];
    local v196 = nil;
    local v197 = nil;
    for v198 = 1, #v195 do
        for v199 = 1, #v195 do
            if (v198 ~= 1 or v199 ~= 1) and (v198 ~= #v195 or v199 ~= 1) and (v198 ~= 1 or v199 ~= #v195) then
                v196 = v195[v198] + 1;
                v197 = v195[v199] + 1;
                v194[v196][v197] = 2;
                v194[v196 + 1][v197] = -2;
                v194[v196 - 1][v197] = -2;
                v194[v196 + 2][v197] = 2;
                v194[v196 - 2][v197] = 2;
                v194[v196][v197 - 2] = 2;
                v194[v196 + 1][v197 - 2] = 2;
                v194[v196 - 1][v197 - 2] = 2;
                v194[v196 + 2][v197 - 2] = 2;
                v194[v196 - 2][v197 - 2] = 2;
                v194[v196][v197 + 2] = 2;
                v194[v196 + 1][v197 + 2] = 2;
                v194[v196 - 1][v197 + 2] = 2;
                v194[v196 + 2][v197 + 2] = 2;
                v194[v196 - 2][v197 + 2] = 2;
                v194[v196][v197 - 1] = -2;
                v194[v196 + 1][v197 - 1] = -2;
                v194[v196 - 1][v197 - 1] = -2;
                v194[v196 + 2][v197 - 1] = 2;
                v194[v196 - 2][v197 - 1] = 2;
                v194[v196][v197 + 1] = -2;
                v194[v196 + 1][v197 + 1] = -2;
                v194[v196 - 1][v197 + 1] = -2;
                v194[v196 + 2][v197 + 1] = 2;
                v194[v196 - 2][v197 + 1] = 2;
            end;
        end;
    end;
end;
local v201 = {
    {
        [-1] = "111111111111111", 
        [0] = "111011111000100"; 
        "111001011110011", 
        "111110110101010", 
        "111100010011101", 
        "110011000101111", 
        "110001100011000", 
        "110110001000001", 
        "110100101110110"
    }, 
    {
        [-1] = "111111111111111", 
        [0] = "101010000010010"; 
        "101000100100101", 
        "101111001111100", 
        "101101101001011", 
        "100010111111001", 
        "100000011001110", 
        "100111110010111", 
        "100101010100000"
    }, 
    {
        [-1] = "111111111111111", 
        [0] = "011010101011111"; 
        "011000001101000", 
        "011111100110001", 
        "011101000000110", 
        "010010010110100", 
        "010000110000011", 
        "010111011011010", 
        "010101111101101"
    }, 
    {
        [-1] = "111111111111111", 
        [0] = "001011010001001"; 
        "001001110111110", 
        "001110011100111", 
        "001100111010000", 
        "000011101100010", 
        "000001001010101", 
        "000110100001100", 
        "000100000111011"
    }
};
local function v217(v202, v203, v204) --[[ Line: 929 ]] --[[ Name: add_typeinfo_to_matrix ]]
    -- upvalues: v201 (copy)
    local v205 = v201[v203][v204];
    local _ = nil;
    for v207 = 1, 7 do
        local v208 = string.sub(v205, v207, v207);
        local v209 = #v202 - v207 + 1;
        if v208 == "1" then
            v202[9][v209] = 2;
        else
            v202[9][v209] = -2;
        end;
    end;
    if string.sub(v205, 8, 8) == "1" then
        v202[9][9] = 2;
    else
        v202[9][9] = -2;
    end;
    if string.sub(v205, 9, 9) == "1" then
        v202[9][8] = 2;
    else
        v202[9][8] = -2;
    end;
    for v210 = 10, 15 do
        local v211 = string.sub(v205, v210, v210);
        local v212 = 16 - v210;
        if v211 == "1" then
            v202[9][v212] = 2;
        else
            v202[9][v212] = -2;
        end;
    end;
    for v213 = 1, 6 do
        if string.sub(v205, v213, v213) == "1" then
            v202[v213][9] = 2;
        else
            v202[v213][9] = -2;
        end;
    end;
    if string.sub(v205, 7, 7) == "1" then
        v202[8][9] = 2;
    else
        v202[8][9] = -2;
    end;
    for v214 = 8, 15 do
        local v215 = string.sub(v205, v214, v214);
        local v216 = #v202 - 15 + v214;
        if v215 == "1" then
            v202[v216][9] = 2;
        else
            v202[v216][9] = -2;
        end;
    end;
end;
local v218 = {
    "001010010011111000", 
    "001111011010000100", 
    "100110010101100100", 
    "110010110010010100", 
    "011011111101110100", 
    "010001101110001100", 
    "111000100001101100", 
    "101100000110011100", 
    "000101001001111100", 
    "000111101101000010", 
    "101110100010100010", 
    "111010000101010010", 
    "010011001010110010", 
    "011001011001001010", 
    "110000010110101010", 
    "100100110001011010", 
    "001101111110111010", 
    "001000110111000110", 
    "100001111000100110", 
    "110101011111010110", 
    "011100010000110110", 
    "010110000011001110", 
    "111111001100101110", 
    "101011101011011110", 
    "000010100100111110", 
    "101010111001000001", 
    "000011110110100001", 
    "010111010001010001", 
    "111110011110110001", 
    "110100001101001001", 
    "011101000010101001", 
    "001001100101011001", 
    "100000101010111001", 
    "100101100011000101"
};
local function v236(v219, v220) --[[ Line: 970 ]] --[[ Name: add_version_information ]]
    -- upvalues: v218 (copy)
    if v220 < 7 then
        return;
    else
        local _ = #v219;
        local v222 = v218[v220 - 6];
        local v223 = nil;
        local v224 = nil;
        local v225 = nil;
        local v226 = nil;
        local v227 = nil;
        v226 = #v219 - 10;
        v227 = 1;
        for v228 = 1, #v222 do
            v225 = string.sub(v222, v228, v228);
            v223 = v226 + math.fmod(v228 - 1, 3);
            v224 = v227 + math.floor((v228 - 1) / 3);
            local l_v225_0 = v225;
            local l_v223_0 = v223;
            local l_v224_0 = v224;
            if l_v225_0 == "1" then
                v219[l_v223_0][l_v224_0] = 2;
            else
                v219[l_v223_0][l_v224_0] = -2;
            end;
        end;
        v226 = 1;
        v227 = #v219 - 10;
        for v232 = 1, #v222 do
            v225 = string.sub(v222, v232, v232);
            v223 = v226 + math.floor((v232 - 1) / 3);
            v224 = v227 + math.fmod(v232 - 1, 3);
            local l_v225_1 = v225;
            local l_v223_1 = v223;
            local l_v224_1 = v224;
            if l_v225_1 == "1" then
                v219[l_v223_1][l_v224_1] = 2;
            else
                v219[l_v223_1][l_v224_1] = -2;
            end;
        end;
        return;
    end;
end;
local function v244(v237, v238, v239) --[[ Line: 998 ]] --[[ Name: prepare_matrix_with_mask ]]
    -- upvalues: v186 (copy), v192 (copy), v236 (copy), v200 (copy), v217 (copy)
    local v240 = nil;
    local v241 = {};
    v240 = v237 * 4 + 17;
    for v242 = 1, v240 do
        v241[v242] = {};
        for v243 = 1, v240 do
            v241[v242][v243] = 0;
        end;
    end;
    v186(v241);
    v192(v241);
    v236(v241, v237);
    v241[9][v240 - 7] = 2;
    v200(v241);
    v217(v241, v238, v239);
    return v241;
end;
local function v250(v245, v246, v247, v248) --[[ Line: 1035 ]] --[[ Name: get_pixel_with_mask ]]
    v246 = v246 - 1;
    v247 = v247 - 1;
    local v249 = false;
    if v245 ~= -1 then
        if v245 == 0 then
            if math.fmod(v246 + v247, 2) == 0 then
                v249 = true;
            end;
        elseif v245 == 1 then
            if math.fmod(v247, 2) == 0 then
                v249 = true;
            end;
        elseif v245 == 2 then
            if math.fmod(v246, 3) == 0 then
                v249 = true;
            end;
        elseif v245 == 3 then
            if math.fmod(v246 + v247, 3) == 0 then
                v249 = true;
            end;
        elseif v245 == 4 then
            if math.fmod(math.floor(v247 / 2) + math.floor(v246 / 3), 2) == 0 then
                v249 = true;
            end;
        elseif v245 == 5 then
            if math.fmod(v246 * v247, 2) + math.fmod(v246 * v247, 3) == 0 then
                v249 = true;
            end;
        elseif v245 == 6 then
            if math.fmod(math.fmod(v246 * v247, 2) + math.fmod(v246 * v247, 3), 2) == 0 then
                v249 = true;
            end;
        elseif v245 == 7 then
            if math.fmod(math.fmod(v246 * v247, 3) + math.fmod(v246 + v247, 2), 2) == 0 then
                v249 = true;
            end;
        else
            assert(false, "This can't happen (mask must be <= 7)");
        end;
    end;
    if v249 then
        return 1 - 2 * tonumber(v248);
    else
        return -1 + 2 * tonumber(v248);
    end;
end;
local function v259(v251, v252, v253, v254, v255) --[[ Line: 1074 ]] --[[ Name: get_next_free_positions ]]
    local v256 = {};
    local v257 = 1;
    local v258 = "right";
    while v257 <= #v255 do
        if v258 == "right" and v251[v252][v253] == 0 then
            v256[#v256 + 1] = {
                v252, 
                v253
            };
            v258 = "left";
            v257 = v257 + 1;
        elseif v258 == "left" and v251[v252 - 1][v253] == 0 then
            v256[#v256 + 1] = {
                v252 - 1, 
                v253
            };
            v258 = "right";
            v257 = v257 + 1;
            if v254 == "up" then
                v253 = v253 - 1;
            else
                v253 = v253 + 1;
            end;
        elseif v258 == "right" and v251[v252 - 1][v253] == 0 then
            v256[#v256 + 1] = {
                v252 - 1, 
                v253
            };
            v257 = v257 + 1;
            if v254 == "up" then
                v253 = v253 - 1;
            else
                v253 = v253 + 1;
            end;
        elseif v254 == "up" then
            v253 = v253 - 1;
        else
            v253 = v253 + 1;
        end;
        if v253 < 1 or #v251 < v253 then
            v252 = v252 - 2;
            if v252 == 7 then
                v252 = 6;
            end;
            if v254 == "up" then
                v254 = "down";
                v253 = 1;
            else
                v254 = "up";
                v253 = #v251;
            end;
        end;
    end;
    return v256, v252, v253, v254;
end;
local function _(v260, v261, v262) --[[ Line: 1124 ]] --[[ Name: add_data_to_matrix ]]
    -- upvalues: v259 (copy), v250 (copy)
    size = #v260;
    local v263 = nil;
    local v264 = nil;
    local v265 = nil;
    local v266 = nil;
    local v267 = nil;
    local v268 = nil;
    local v269 = "up";
    local v270 = 0;
    v263 = size;
    v264 = size;
    string.gsub(v261, ".?.?.?.?.?.?.?.?", function(v271) --[[ Line: 1131 ]]
        -- upvalues: v270 (ref), v265 (ref), v263 (ref), v264 (ref), v269 (ref), v259 (ref), v260 (copy), v262 (copy), v266 (ref), v267 (ref), v268 (ref), v250 (ref)
        v270 = v270 + 1;
        local v272, v273, v274, v275 = v259(v260, v263, v264, v269, v271, v262);
        v265 = v272;
        v263 = v273;
        v264 = v274;
        v269 = v275;
        for v276 = 1, #v271 do
            v266 = v265[v276][1];
            v267 = v265[v276][2];
            v268 = v250(v262, v266, v267, (string.sub(v271, v276, v276)));
            if debugging then
                v260[v266][v267] = v268 * (v276 + 10);
            else
                v260[v266][v267] = v268;
            end;
        end;
    end);
end;
local function v294(v278) --[[ Line: 1158 ]] --[[ Name: calculate_penalty ]]
    local v279 = 0;
    local v280 = 0;
    local v281 = 0;
    local v282 = 0;
    local v283 = #v278;
    local v284 = 0;
    local v285 = nil;
    local v286 = nil;
    local v287 = nil;
    for v288 = 1, v283 do
        v287 = 0;
        v285 = nil;
        for v289 = 1, v283 do
            if v278[v288][v289] > 0 then
                v284 = v284 + 1;
                v286 = false;
            else
                v286 = true;
            end;
            v286 = v278[v288][v289] < 0;
            if v285 == v286 then
                v287 = v287 + 1;
            else
                if v287 >= 5 then
                    v279 = v279 + v287 - 2;
                end;
                v287 = 1;
            end;
            v285 = v286;
        end;
        if v287 >= 5 then
            v279 = v279 + v287 - 2;
        end;
    end;
    for v290 = 1, v283 do
        v287 = 0;
        v285 = nil;
        for v291 = 1, v283 do
            v286 = v278[v291][v290] < 0;
            if v285 == v286 then
                v287 = v287 + 1;
            else
                if v287 >= 5 then
                    v279 = v279 + v287 - 2;
                end;
                v287 = 1;
            end;
            v285 = v286;
        end;
        if v287 >= 5 then
            v279 = v279 + v287 - 2;
        end;
    end;
    for v292 = 1, v283 do
        for v293 = 1, v283 do
            if v293 < v283 - 1 and v292 < v283 - 1 and (v278[v292][v293] < 0 and v278[v292 + 1][v293] < 0 and v278[v292][v293 + 1] < 0 and v278[v292 + 1][v293 + 1] < 0 or v278[v292][v293] > 0 and v278[v292 + 1][v293] > 0 and v278[v292][v293 + 1] > 0 and v278[v292 + 1][v293 + 1] > 0) then
                v280 = v280 + 3;
            end;
            if v293 + 6 < v283 and v278[v292][v293] > 0 and v278[v292][v293 + 1] < 0 and v278[v292][v293 + 2] > 0 and v278[v292][v293 + 3] > 0 and v278[v292][v293 + 4] > 0 and v278[v292][v293 + 5] < 0 and v278[v292][v293 + 6] > 0 and (v293 + 10 < v283 and v278[v292][v293 + 7] < 0 and v278[v292][v293 + 8] < 0 and v278[v292][v293 + 9] < 0 and v278[v292][v293 + 10] < 0 or v293 - 4 >= 1 and v278[v292][v293 - 1] < 0 and v278[v292][v293 - 2] < 0 and v278[v292][v293 - 3] < 0 and v278[v292][v293 - 4] < 0) then
                v281 = v281 + 40;
            end;
            if v292 + 6 <= v283 and v278[v292][v293] > 0 and v278[v292 + 1][v293] < 0 and v278[v292 + 2][v293] > 0 and v278[v292 + 3][v293] > 0 and v278[v292 + 4][v293] > 0 and v278[v292 + 5][v293] < 0 and v278[v292 + 6][v293] > 0 and (v292 + 10 <= v283 and v278[v292 + 7][v293] < 0 and v278[v292 + 8][v293] < 0 and v278[v292 + 9][v293] < 0 and v278[v292 + 10][v293] < 0 or v292 - 4 >= 1 and v278[v292 - 1][v293] < 0 and v278[v292 - 2][v293] < 0 and v278[v292 - 3][v293] < 0 and v278[v292 - 4][v293] < 0) then
                v281 = v281 + 40;
            end;
        end;
    end;
    v282 = math.floor((math.abs(v284 / (v283 * v283) * 100 - 50))) * 2;
    return v279 + v280 + v281 + v282;
end;
local function _(v295, v296, v297, v298) --[[ Line: 1280 ]] --[[ Name: get_matrix_and_penalty ]]
    -- upvalues: v244 (copy), v259 (copy), v250 (copy), v294 (copy)
    local v299 = v244(v295, v296, v298);
    size = #v299;
    local v300 = nil;
    local v301 = nil;
    local v302 = nil;
    local v303 = nil;
    local v304 = nil;
    local v305 = nil;
    local v306 = "up";
    local v307 = 0;
    v300 = size;
    v301 = size;
    do
        local l_v300_0, l_v301_0, l_v302_0, l_v303_0, l_v304_0, l_v305_0, l_v306_0, l_v307_0 = v300, v301, v302, v303, v304, v305, v306, v307;
        string.gsub(v297, ".?.?.?.?.?.?.?.?", function(v316) --[[ Line: 1131 ]]
            -- upvalues: l_v307_0 (ref), l_v302_0 (ref), l_v300_0 (ref), l_v301_0 (ref), l_v306_0 (ref), v259 (ref), v299 (copy), v298 (copy), l_v303_0 (ref), l_v304_0 (ref), l_v305_0 (ref), v250 (ref)
            l_v307_0 = l_v307_0 + 1;
            local v317, v318, v319, v320 = v259(v299, l_v300_0, l_v301_0, l_v306_0, v316, v298);
            l_v302_0 = v317;
            l_v300_0 = v318;
            l_v301_0 = v319;
            l_v306_0 = v320;
            for v321 = 1, #v316 do
                l_v303_0 = l_v302_0[v321][1];
                l_v304_0 = l_v302_0[v321][2];
                l_v305_0 = v250(v298, l_v303_0, l_v304_0, (string.sub(v316, v321, v321)));
                if debugging then
                    v299[l_v303_0][l_v304_0] = l_v305_0 * (v321 + 10);
                else
                    v299[l_v303_0][l_v304_0] = l_v305_0;
                end;
            end;
        end);
    end;
    return v299, (v294(v299));
end;
local function v375(v323, v324, v325) --[[ Line: 1290 ]] --[[ Name: get_matrix_with_lowest_penalty ]]
    -- upvalues: v244 (copy), v259 (copy), v250 (copy), v294 (copy)
    local v326 = nil;
    local v327 = nil;
    local v328 = nil;
    local v329 = nil;
    local v330 = v244(v323, v324, 0);
    size = #v330;
    local v331 = nil;
    local v332 = nil;
    local v333 = nil;
    local v334 = nil;
    local v335 = nil;
    local v336 = nil;
    local v337 = "up";
    local v338 = 0;
    v331 = size;
    v332 = size;
    local l_gsub_0 = string.gsub;
    local l_v325_0 = v325;
    local v341 = ".?.?.?.?.?.?.?.?";
    local v342 = 0;
    local l_v330_0 = v330 --[[ copy: 9 -> 23 ]];
    do
        local l_v331_0, l_v332_0, l_v333_0, l_v334_0, l_v335_0, l_v336_0, l_v337_0, l_v338_0 = v331, v332, v333, v334, v335, v336, v337, v338;
        l_gsub_0(l_v325_0, v341, function(v352) --[[ Line: 1131 ]]
            -- upvalues: l_v338_0 (ref), l_v333_0 (ref), l_v331_0 (ref), l_v332_0 (ref), l_v337_0 (ref), v259 (ref), l_v330_0 (copy), v342 (copy), l_v334_0 (ref), l_v335_0 (ref), l_v336_0 (ref), v250 (ref)
            l_v338_0 = l_v338_0 + 1;
            local v353, v354, v355, v356 = v259(l_v330_0, l_v331_0, l_v332_0, l_v337_0, v352, v342);
            l_v333_0 = v353;
            l_v331_0 = v354;
            l_v332_0 = v355;
            l_v337_0 = v356;
            for v357 = 1, #v352 do
                l_v334_0 = l_v333_0[v357][1];
                l_v335_0 = l_v333_0[v357][2];
                l_v336_0 = v250(v342, l_v334_0, l_v335_0, (string.sub(v352, v357, v357)));
                if debugging then
                    l_v330_0[l_v334_0][l_v335_0] = l_v336_0 * (v357 + 10);
                else
                    l_v330_0[l_v334_0][l_v335_0] = l_v336_0;
                end;
            end;
        end);
    end;
    v331 = v294(v330);
    local l_v330_1 = v330;
    local l_v331_1 = v331;
    v328 = l_v330_1;
    v329 = l_v331_1;
    for v360 = 1, 7 do
        v333 = v244(v323, v324, v360);
        size = #v333;
        v334 = nil;
        v335 = nil;
        v336 = nil;
        v337 = nil;
        v338 = nil;
        l_gsub_0 = nil;
        l_v325_0 = "up";
        v341 = 0;
        v334 = size;
        v335 = size;
        do
            local l_v334_1, l_v335_1, l_v336_1, l_v337_1, l_v338_1, l_l_gsub_0_0, l_l_v325_0_0, l_v341_0 = v334, v335, v336, v337, v338, l_gsub_0, l_v325_0, v341;
            string.gsub(v325, ".?.?.?.?.?.?.?.?", function(v369) --[[ Line: 1131 ]]
                -- upvalues: l_v341_0 (ref), l_v336_1 (ref), l_v334_1 (ref), l_v335_1 (ref), l_l_v325_0_0 (ref), v259 (ref), v333 (copy), v360 (copy), l_v337_1 (ref), l_v338_1 (ref), l_l_gsub_0_0 (ref), v250 (ref)
                l_v341_0 = l_v341_0 + 1;
                local v370, v371, v372, v373 = v259(v333, l_v334_1, l_v335_1, l_l_v325_0_0, v369, v360);
                l_v336_1 = v370;
                l_v334_1 = v371;
                l_v335_1 = v372;
                l_l_v325_0_0 = v373;
                for v374 = 1, #v369 do
                    l_v337_1 = l_v336_1[v374][1];
                    l_v338_1 = l_v336_1[v374][2];
                    l_l_gsub_0_0 = v250(v360, l_v337_1, l_v338_1, (string.sub(v369, v374, v374)));
                    if debugging then
                        v333[l_v337_1][l_v338_1] = l_l_gsub_0_0 * (v374 + 10);
                    else
                        v333[l_v337_1][l_v338_1] = l_l_gsub_0_0;
                    end;
                end;
            end);
        end;
        v334 = v294(v333);
        v331 = v333;
        v332 = v334;
        v326 = v331;
        v327 = v332;
        if v327 < v329 then
            v328 = v326;
            v329 = v327;
        end;
    end;
    return v328;
end;
return {
    encode_string_numeric = v72, 
    encode_string_ascii = v79, 
    qrcode = function(v376, v377, _) --[[ Line: 1314 ]] --[[ Name: qrcode ]]
        -- upvalues: v50 (copy), v57 (copy), v25 (copy), v67 (copy), v83 (copy), v101 (copy), v178 (copy), v157 (copy), v375 (copy)
        local v379 = nil;
        local v380 = nil;
        local v381 = nil;
        local v382 = nil;
        local _ = nil;
        local l_v377_0 = v377;
        local v385 = nil;
        v385 = string.match(v376, "^[0-9]+$") and 1 or string.match(v376, "^[0-9A-Z $%%*./:+-]+$") and 2 or 4;
        local v386 = nil;
        local v387 = nil;
        local v388, v389 = v50(#v376, v385, l_v377_0);
        v386 = v388;
        v387 = v389;
        v388 = v57(v376, v386, v385);
        local l_v386_0 = v386;
        local l_v387_0 = v387;
        local v392 = v25(v385, 4);
        local l_v385_0 = v385;
        local l_v388_0 = v388;
        v380 = l_v386_0;
        v377 = l_v387_0;
        v381 = v392;
        v382 = l_v385_0;
        l_v386_0 = v381 .. l_v388_0;
        v392 = v382;
        if v392 == 1 then
            l_v385_0 = "";
            l_v388_0 = nil;
            do
                local l_l_v385_0_0, l_l_v388_0_0 = l_v385_0, l_v388_0;
                string.gsub(v376, "..?.?", function(v397) --[[ Line: 342 ]]
                    -- upvalues: l_l_v388_0_0 (ref), l_l_v385_0_0 (ref), v25 (ref)
                    l_l_v388_0_0 = tonumber(v397);
                    if #v397 == 3 then
                        l_l_v385_0_0 = l_l_v385_0_0 .. v25(l_l_v388_0_0, 10);
                        return;
                    elseif #v397 == 2 then
                        l_l_v385_0_0 = l_l_v385_0_0 .. v25(l_l_v388_0_0, 7);
                        return;
                    else
                        l_l_v385_0_0 = l_l_v385_0_0 .. v25(l_l_v388_0_0, 4);
                        return;
                    end;
                end);
                l_v387_0 = l_l_v385_0_0;
            end;
        elseif v392 == 2 then
            l_v385_0 = "";
            l_v388_0 = nil;
            l_v377_0 = nil;
            v385 = nil;
            do
                local l_l_v385_0_1, l_l_v388_0_1, l_l_v377_0_0, l_v385_1 = l_v385_0, l_v388_0, l_v377_0, v385;
                string.gsub(v376, "..?", function(v402) --[[ Line: 361 ]]
                    -- upvalues: l_l_v377_0_0 (ref), v67 (ref), l_v385_1 (ref), l_l_v388_0_1 (ref), l_l_v385_0_1 (ref), v25 (ref)
                    if #v402 == 2 then
                        l_l_v377_0_0 = v67[string.byte((string.sub(v402, 1, 1)))];
                        l_v385_1 = v67[string.byte((string.sub(v402, 2, 2)))];
                        l_l_v388_0_1 = l_l_v377_0_0 * 45 + l_v385_1;
                        l_l_v385_0_1 = l_l_v385_0_1 .. v25(l_l_v388_0_1, 11);
                        return;
                    else
                        l_l_v388_0_1 = v67[string.byte(v402)];
                        l_l_v385_0_1 = l_l_v385_0_1 .. v25(l_l_v388_0_1, 6);
                        return;
                    end;
                end);
                l_v387_0 = l_l_v385_0_1;
            end;
        elseif v392 == 4 then
            l_v387_0 = v83(v376);
        else
            assert(false, "not implemented yet");
            l_v387_0 = nil;
        end;
        v381 = l_v386_0 .. l_v387_0;
        v381 = v101(v380, v377, v381);
        v379 = v178(v380, v377, v381);
        if math.fmod(#v379, 8) ~= 0 then
            return false, string.format("Arranged data %% 8 != 0: data length = %d, mod 8 = %d", #v379, (math.fmod(#v379, 8)));
        else
            v379 = v379 .. string.rep("0", v157[v380]);
            return true, (v375(v380, v377, v379));
        end;
    end, 
    binary = v25, 
    get_mode = v32, 
    get_length = v57, 
    add_pad_data = v101, 
    get_generator_polynominal_adjusted = v116, 
    get_pixel_with_mask = v250, 
    get_version_eclevel_mode_bistringlength = v66, 
    remainder = v157, 
    arrange_codewords_and_calculate_ec = v178, 
    calculate_error_correction = v155, 
    convert_bitstring_to_bytes = v109, 
    bit_xor = v17
};